------- FILE main.s LEVEL 1 PASS 3
      1  1d80 ????						; title screen program -- use hand-made compression method (esentially just RLE, see rleEncoding.py)
      2  1d80 ????				      processor	6502
      3  1d80 ????
      4 U0033 ????				      seg.u	ZP
      5 U0000					      org	$0
      6 U0000
      7 U0000
      8 U0000		       00 00	   screen_cursor ds.w	1	; stores the current screen memory address
      9 U0002		       00 00	   color_cursor ds.w	1	; store current color memory address
     10 U0004		       00 00	   current_level ds.w	1
     11 U0006		       00 00	   next_level ds.w	1
     12 U0008		       00	   level_reset ds.b	1
     13 U0009		       00	   level_completed ds.b	1
     14 U000a		       00	   level_data_index ds.b	1	; for temporarily saving index registers
     15 U000b		       00 00	   new_position ds.w	1	; use to store position of (proposed) new location for squarebot
     16 U000d		       00 00	   new_color_position ds.w	1	; use to store position of (proposed) new location for squarebot
     17 U000f		       00	   current_time ds.b	1	; store only the last byte of the jiffy clock
     18 U0010		       00 00	   squarebot_position ds.w	1
     19 U0012		       00 00	   squarebot_color_position ds.w	1
     20 U0014		       00	   jump_dir   ds.b	1	; 0 = up, 1=left, 2=right
     21 U0015		       00	   jump_num   ds.b	1
     22 U0016		       00 00 00 00*tile_store ds.b	5
     23 U001b							;colorStore ds.b 5 ; U, D, L, R, M  not the most efficient storage but it needs to also be efficient to decompress
     24 U001b		       00 00 00 00 attached_powerups ds.b	4
     25 U001f							; $0=none  $1=ignitedBooster $A=readyBooster  $B=activeBooster  $C=key  $D=spike(change into shield)
     26 U001f		       00 00 00 00*delta      ds.b	5	; U D L R M
     27 U0024		       00 00 00 00 chars      ds.b	4
     28 U0028		       00 00 00 00 temp       ds.b	4	; for temporary storage of things. mainly used in updateGameState
     29 U002c		       00	   move_dir_store ds.b	1	; exclusively for move_dir and related subroutines
     30 U002d		       00 00 00    chareor    ds.b	3	; for the incredibly complex operation of eoring chars
     31 U0030		       00	   count_chars_drawn ds.b	1	; count number of chars drawn on screen in the current run
     32 U0031		       00	   temp_a     ds.b	1	; store acc
     33 U0032		       00	   temp_x     ds.b	1	; store x
     34  1d80 ????				      seg
     35  1d80 ????
     36  1d80 ????						; constants
     37  1d80 ????	       00 20	   BLANK_CHAR =	$20
     38  1d80 ????
     39  1d80 ????	       00 00	   SCREEN_CURSOR_BEGINNING_LOW_BYTE =	$00
     40  1d80 ????	       00 1e	   SCREEN_CURSOR_BEGINNING_HIGH_BYTE =	$1e
     41  1d80 ????
     42  1d80 ????						; last screen location
     43  1d80 ????	       00 fa	   END_OF_SCREEN_LOW_BYTE =	$fa
     44  1d80 ????	       00 1f	   END_OF_SCREEN_HIGH_BYTE =	$1f
     45  1d80 ????
     46  1d80 ????						; beginning of color memory
     47  1d80 ????	       00 00	   COLOR_CURSOR_BEGINNING_LOW_BYTE =	$00
     48  1d80 ????	       00 96	   COLOR_CURSOR_BEGINNING_HIGH_BYTE =	$96
     49  1d80 ????	       00 00	   RED_COLOR_CODE =	0
     50  1d80 ????
     51  1d80 ????	       00 20	   SPACE_KEY  =	$20
     52  1d80 ????	       00 30	   Q_KEY      =	$30
     53  1d80 ????	       00 09	   W_KEY      =	$09
     54  1d80 ????	       00 31	   E_KEY      =	$31
     55  1d80 ????	       00 11	   A_KEY      =	$11
     56  1d80 ????	       00 29	   S_KEY      =	$29
     57  1d80 ????	       00 12	   D_KEY      =	$12
     58  1d80 ????	       00 0d	   SECRET_KEY =	$0d	; press P to skip to next  level
     59  1d80 ????	       00 0a	   RESET_KEY  =	$0a	; press R to restart level i assume
     60  1d80 ????	       00 01	   JUMP_SIZE  =	$01	; number of characters a jump causes
     61  1d80 ????	       00 16	   ROW_SIZE   =	$16
     62  1d80 ????
     63  1d80 ????						; memory locations
     64  1d80 ????	       10 01	   user_memory_start =	$1001
     65  1d80 ????	       00 c5	   currently_pressed_key =	$c5	;proposed fix: mem editor 028 abc space bar loops
     66  1d80 ????	       00 a0	   jiffy_clock =	$A0
     67  1d80 ????	       90 05	   character_info_register =	$9005
     68  1d80 ????	       1c 00	   character_set_begin =	$1c00
     69  1d80 ????	       00 16	   tile_store_addr =	$16
     70  1d80 ????	       00 1b	   attached_powerups_addr =	$1b
     71  1d80 ????	       00 1f	   delta_addr =	$1f
     72  1d80 ????	       00 24	   chars_addr =	$24
     73  1d80 ????
     74  1d80 ????						; begin location counter at 4096 (user memory)
     75  1001					      org	user_memory_start
------- FILE stub.s LEVEL 2 PASS 3
      0  1001					      include	"stub.s"	; stub contains BASIC sys cmd to run the machine language code
      1  1001		       00 9e	   SYS_CMD_TOKEN =	$9e
      2  1001		       00 0a	   STUB_LINE_NUMBER =	10
      3  1001							; BASIC stub -- SYS cmd to run machine language
      4  1001		       0b 10		      dc.w	nextstmt	; link; beginning of basic
      5  1003		       0a 00		      dc.w	STUB_LINE_NUMBER	; line number
      6  1005		       9e 34 31 30*	      dc.b	SYS_CMD_TOKEN, [start]d, 0	; token for sys with operand as address to "start" label
      7  100b				   nextstmt
      8  100b		       00 00		      dc.w	0
------- FILE main.s
     77  100d
     78  100d				   start
     79  100d							; use combination of RAM (first 128 chars at 7168) & ROM character set
     80  100d		       a9 ff		      lda	#255
     81  100f		       8d 05 90 	      sta	character_info_register
     82  1012
     83  1012							; initialize some variables in the zero page
     84  1012		       a9 01		      lda	#1
     85  1014		       85 08		      sta	level_reset
     86  1016		       a9 00		      lda	#0
     87  1018		       85 09		      sta	level_completed
     88  101a
     89  101a		       a9 30		      lda	#<level_data_start
     90  101c		       85 04		      sta	current_level
     91  101e		       a9 17		      lda	#>level_data_start
     92  1020		       85 05		      sta	current_level+1
     93  1022
     94  1022		       a9 00		      lda	#0
     95  1024		       85 30		      sta	count_chars_drawn
     96  1026		       85 15		      sta	jump_num
     97  1028		       85 14		      sta	jump_dir
     98  102a		       85 1b		      sta	attached_powerups
     99  102c		       85 1c		      sta	attached_powerups+1
    100  102e		       85 1d		      sta	attached_powerups+2
    101  1030		       85 1e		      sta	attached_powerups+3
    102  1032		       85 16		      sta	tile_store
    103  1034		       85 17		      sta	tile_store+1
    104  1036		       85 18		      sta	tile_store+2
    105  1038		       85 19		      sta	tile_store+3
    106  103a		       85 1a		      sta	tile_store+4
    107  103c		       85 28		      sta	temp
    108  103e		       85 29		      sta	temp+1
    109  1040		       85 2a		      sta	temp+2
    110  1042		       85 2b		      sta	temp+3
    111  1044		       a9 01		      lda	#1	; up
    112  1046		       85 1f		      sta	delta
    113  1048		       a9 2d		      lda	#[ROW_SIZE+ROW_SIZE+1]	; down
    114  104a		       85 20		      sta	delta+1
    115  104c		       a9 16		      lda	#ROW_SIZE	; left
    116  104e		       85 21		      sta	delta+2
    117  1050		       a9 18		      lda	#[ROW_SIZE+2]	; right
    118  1052		       85 22		      sta	delta+3
    119  1054		       a9 17		      lda	#[ROW_SIZE+1]	; mid
    120  1056		       85 23		      sta	delta+4
    121  1058		       a9 0f		      lda	#CHAR_U	; index of powerup characters
    122  105a		       85 24		      sta	chars
    123  105c		       a9 10		      lda	#CHAR_D
    124  105e		       85 25		      sta	chars+1
    125  1060		       a9 11		      lda	#CHAR_L
    126  1062		       85 26		      sta	chars+2
    127  1064		       a9 12		      lda	#CHAR_R
    128  1066		       85 27		      sta	chars+3
    129  1068
------- FILE titleScreen.s LEVEL 2 PASS 3
      0  1068					      include	"titleScreen.s"
      1  1068		       00 00	   TITLE_SCREEN_CHAR_COLOR =	0
      2  1068		       00 0f	   ENTER_KEY  =	$0f
      3  1068
      4  1068				   display_title_screen
      5  1068		       a9 00		      lda	#SCREEN_CURSOR_BEGINNING_LOW_BYTE
      6  106a		       85 00		      sta	screen_cursor
      7  106c		       a9 1e		      lda	#SCREEN_CURSOR_BEGINNING_HIGH_BYTE	; store 1e in location 01
      8  106e		       85 01		      sta	screen_cursor+1
      9  1070
     10  1070		       a9 00		      lda	#COLOR_CURSOR_BEGINNING_LOW_BYTE
     11  1072		       85 02		      sta	color_cursor
     12  1074		       a9 96		      lda	#COLOR_CURSOR_BEGINNING_HIGH_BYTE
     13  1076		       85 03		      sta	color_cursor+1
     14  1078
     15  1078		       a0 00		      ldy	#$0	; to use for indirect indexed addressing
     16  107a		       a2 00		      ldx	#$0
     17  107c
     18  107c		       20 8c 10 	      jsr	draw_title_screen_chars_loop
     19  107f		       a0 00		      ldy	#$0	; to use for indirect indexed addressing
     20  1081		       a2 00		      ldx	#$0
     21  1083
     22  1083
     23  1083				   infinite_loop
     24  1083		       a5 c5		      lda	currently_pressed_key
     25  1085		       c9 0f		      cmp	#ENTER_KEY
     26  1087		       f0 65		      beq	gameLoop
     27  1089		       4c 83 10 	      jmp	infinite_loop
     28  108c
     29  108c
     30  108c				   draw_title_screen_chars_loop
     31  108c		       bd 80 16 	      lda	compressed_screen_data_start,X	; accumulator stores num times to repeat the byte
     32  108f		       20 9a 10 	      jsr	draw_character	; draw the character that many times
     33  1092		       e8		      inx
     34  1093		       e8		      inx
     35  1094		       20 de 10 	      jsr	check_if_screen_cursor_at_end
     36  1097		       90 f3		      bcc	draw_title_screen_chars_loop
     37  1099		       60		      rts
     38  109a
     39  109a
     40  109a							; draw the character in Y register for (value of accumulator) number of times
     41  109a				   draw_character
     42  109a							; if accumulator == 0, return; otherwise, subtract 1 from accumulator and continue drawing the letter at Y
     43  109a		       f0 26		      beq	draw_character_end
     44  109c		       38		      sec
     45  109d		       e9 01		      sbc	#1
     46  109f		       48		      pha		; push accumulator onto stack
     47  10a0
     48  10a0							; store current char at screen cursor location
     49  10a0		       a0 00		      ldy	#0
     50  10a2		       bd 81 16 	      lda	compressed_screen_data_start+1,X	; load cur char to draw
     51  10a5
     52  10a5							; solid block in the title screen editor is the a0 character; we convert that to the equivalent here (wall), as we cant access that char
     53  10a5		       c9 64		      cmp	#100
     54  10a7		       90 06		      bcc	below_100	; below 100 - add 128, map directly
     55  10a9		       38		      sec
     56  10aa		       e9 64		      sbc	#100
     57  10ac		       4c b1 10 	      jmp	draw_title_screen_char
     58  10af							; dont_map_wall
     59  10af				   below_100
     60  10af		       69 80		      adc	#128
     61  10b1				   draw_title_screen_char
     62  10b1		       91 00		      sta	(screen_cursor),Y	; draw it on screen
     63  10b3
     64  10b3
     65  10b3							; add color to the screen location if it's not a space
     66  10b3							; because our title screen only has one color, and only displays it for characters that arent space, we can get away with this "optimization",
     67  10b3							; and avoid adding color data
     68  10b3		       c9 a0		      cmp	#BLANK_CHAR+128
     69  10b5		       f0 04		      beq	dont_color
     70  10b7
     71  10b7		       a9 00		      lda	#TITLE_SCREEN_CHAR_COLOR
     72  10b9		       91 02		      sta	(color_cursor),Y
     73  10bb
     74  10bb				   dont_color
     75  10bb		       20 c3 10 	      jsr	add_one_to_screen_cursor
     76  10be		       68		      pla		; put the current 'count' (remaining times to draw character) back on accumulator
     77  10bf		       4c 9a 10 	      jmp	draw_character
     78  10c2
     79  10c2				   draw_character_end
     80  10c2		       60		      rts
     81  10c3
     82  10c3
     83  10c3				   add_one_to_screen_cursor
     84  10c3		       18		      clc
     85  10c4		       a5 00		      lda	screen_cursor	; load and add to low byte
     86  10c6		       69 01		      adc	#$1
     87  10c8		       85 00		      sta	screen_cursor
     88  10ca		       a5 01		      lda	screen_cursor+1
     89  10cc		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
     90  10ce		       85 01		      sta	screen_cursor+1
     91  10d0
     92  10d0							; add to color cursor as well
     93  10d0		       18		      clc
     94  10d1		       a5 02		      lda	color_cursor	; load and add to low byte
     95  10d3		       69 01		      adc	#$1
     96  10d5		       85 02		      sta	color_cursor
     97  10d7		       a5 03		      lda	color_cursor+1
     98  10d9		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
     99  10db		       85 03		      sta	color_cursor+1
    100  10dd		       60		      rts
    101  10de
    102  10de				   check_if_screen_cursor_at_end		; set carry flag if screen_cursor at position $1ff9 (8185
    103  10de		       a5 00		      lda	screen_cursor	; load value at screen_cursor low byte
    104  10e0		       c9 fa		      cmp	#END_OF_SCREEN_LOW_BYTE
    105  10e2		       d0 06		      bne	check_if_screen_cursor_at_end_return_false	; if low byte doesnt match, return with carry flag as neg
    106  10e4
    107  10e4		       a5 01		      lda	screen_cursor+1
    108  10e6		       c9 1f		      cmp	#END_OF_SCREEN_HIGH_BYTE
    109  10e8		       f0 02		      beq	check_if_screen_cursor_at_end_return_true	; if high byte matches, set carry flag
    110  10ea
    111  10ea				   check_if_screen_cursor_at_end_return_false
    112  10ea		       18		      clc
    113  10eb		       60		      rts
    114  10ec
    115  10ec				   check_if_screen_cursor_at_end_return_true
    116  10ec		       38		      sec
    117  10ed		       60		      rts
------- FILE main.s
    131  10ee
    132  10ee							; title screen code jumps here once space pressed
    133  10ee				   gameLoop
    134  10ee		       20 39 11 	      jsr	update_level
    135  10f1		       a9 00		      lda	#0
    136  10f3		       85 08		      sta	level_reset
    137  10f5		       20 a4 12 	      jsr	update_game_state
    138  10f8		       20 19 11 	      jsr	check_for_secret_key
    139  10fb		       20 2b 11 	      jsr	check_for_reset_key
    140  10fe		       20 10 11 	      jsr	wait_until_next_frame
    141  1101		       20 10 11 	      jsr	wait_until_next_frame
    142  1104		       20 10 11 	      jsr	wait_until_next_frame
    143  1107		       20 10 11 	      jsr	wait_until_next_frame
    144  110a		       20 10 11 	      jsr	wait_until_next_frame
    145  110d		       4c ee 10 	      jmp	gameLoop
    146  1110
    147  1110
    148  1110				   wait_until_next_frame		; wait one jiffy before completing game loop
    149  1110		       a5 a2		      lda	jiffy_clock+2
    150  1112		       c5 0f		      cmp	current_time
    151  1114		       f0 fa		      beq	wait_until_next_frame
    152  1116		       85 0f		      sta	current_time
    153  1118		       60		      rts
    154  1119
    155  1119							; update level_completed and level_reset if secret_key pressed
    156  1119				   check_for_secret_key
    157  1119		       a5 c5		      lda	currently_pressed_key
    158  111b		       c9 0d		      cmp	#SECRET_KEY
    159  111d		       d0 0b		      bne	check_for_secret_key_return
    160  111f		       20 66 14 	      jsr	delete_squarebot
    161  1122		       a9 01		      lda	#1
    162  1124		       85 09		      sta	level_completed
    163  1126		       a9 01		      lda	#1
    164  1128		       85 08		      sta	level_reset
    165  112a				   check_for_secret_key_return
    166  112a		       60		      rts
    167  112b
    168  112b				   check_for_reset_key
    169  112b		       a5 c5		      lda	currently_pressed_key
    170  112d		       c9 0a		      cmp	#RESET_KEY
    171  112f		       d0 f9		      bne	check_for_secret_key_return	; todo -- reset  a bunch of state (has_key, )
    172  1131		       20 66 14 	      jsr	delete_squarebot
    173  1134		       a9 01		      lda	#1
    174  1136		       85 08		      sta	level_reset
    175  1138				   check_for_reset_key_return
    176  1138		       60		      rts
    177  1139
------- FILE updateLevel.s LEVEL 2 PASS 3
      0  1139					      include	"updateLevel.s"
      1  1139		       00 01	   LEVEL_IS_DONE =	1
      2  1139		       00 00	   LEVEL_NOT_DONE =	0
      3  1139		       00 01	   SHOULD_RESET =	1
      4  1139		       00 00	   SHOULD_NOT_RESET =	0
      5  1139
      6  1139							; only first 4 bits really matter here; refer to readme for guide on lvl format
      7  1139		       00 00	   BLANK_SPACE =	0	; 000000000
      8  1139		       00 10	   STARTING_POINT =	16	; 00010000
      9  1139		       00 20	   WALL       =	32	; 00100000
     10  1139		       00 30	   BREAKABLE_WALL =	48	; 00110000
     11  1139		       00 40	   LOCKED_WALL =	64	; 01000000
     12  1139		       00 50	   LADDER     =	80	; 01010000
     13  1139		       00 60	   EXIT       =	96	; 01100000
     14  1139		       00 70	   PLATFORM   =	112	; 01110000
     15  1139		       00 80	   KEY	      =	128	; 10000000
     16  1139		       00 90	   SPIKE      =	144	; 10010000
     17  1139		       00 a0	   BOOSTER    =	160	; 10100000
     18  1139		       00 b0	   LOCKED_EXIT =	176	; 1011000
     19  1139
     20  1139		       00 00	   WALL_COLOR =	0
     21  1139		       00 00	   BREAKABLE_WALL_COLOR =	0
     22  1139		       00 00	   LOCKED_WALL_COLOR =	0
     23  1139		       00 00	   LADDER_COLOR =	0	;6
     24  1139		       00 00	   EXIT_COLOR =	0	;6
     25  1139		       00 00	   LOCKED_EXIT_COLOR =	0
     26  1139		       00 00	   PLATFORM_COLOR =	0	;4
     27  1139		       00 00	   SPIKE_COLOR =	0	;2
     28  1139		       00 00	   KEY_P_COLOR =	0	;7
     29  1139		       00 00	   BOOSTER_P_COLOR =	0	;6
     30  1139		       00 02	   SQUAREBOT_COLOR =	2
     31  1139
     32  1139		       00 00	   BLANK_TILE_CHAR =	$00	; use this instead of BLANK_CHAR, allows me to save space with tile_store
     33  1139		       00 01	   LADDER_CHAR =	$01
     34  1139		       00 02	   PLATFORM_CHAR =	$02
     35  1139		       00 03	   WALL_CHAR  =	$03
     36  1139		       00 04	   EXIT_CHAR  =	$04
     37  1139		       00 05	   LOCKED_EXIT_CHAR =	$05
     38  1139		       00 06	   LOCKED_WALL_CHAR =	$06
     39  1139		       00 07	   BREAKABLE_WALL_CHAR =	$07
     40  1139		       00 08	   SPIKE_CHAR =	$08
     41  1139		       00 09	   BOOSTER_P_CHAR =	$09
     42  1139		       00 0a	   KEY_P_CHAR =	$0A
     43  1139		       00 14	   RBOOSTER_A_CHAR =	$14
     44  1139		       00 18	   ABOOSTER_A_CHAR =	$18
     45  1139		       00 1c	   KEY_A_CHAR =	$1C
     46  1139		       00 0f	   CHAR_U     =	$0F
     47  1139		       00 10	   CHAR_D     =	$10
     48  1139		       00 11	   CHAR_L     =	$11
     49  1139		       00 12	   CHAR_R     =	$12
     50  1139		       00 13	   SQUAREBOT_CHAR =	$13
     51  1139		       00 17	   LEVEL_BEGINNING_LOW_BYTE =	$17
     52  1139		       00 1e	   LEVEL_BEGINNING_HIGH_BYTE =	$1e
     53  1139		       00 17	   LEVEL_COLOR_BEGINNING_LOW_BYTE =	$17
     54  1139		       00 96	   LEVEL_COLOR_BEGINNING_HIGH_BYTE =	$96
     55  1139		       00 e5	   END_OF_LEVEL_LOW_BYTE =	$e5
     56  1139		       00 1f	   END_OF_LEVEL_HIGH_BYTE =	$1f
     57  1139
     58  1139				   update_level
     59  1139							; check if the level is completed; set current_level to next_level if so
     60  1139		       a5 09		      lda	level_completed
     61  113b		       c9 01		      cmp	#LEVEL_IS_DONE	; (try optimizing later)
     62  113d		       d0 13		      bne	dont_update
     63  113f
     64  113f							; level is done; reset level completed
     65  113f		       a9 00		      lda	#LEVEL_NOT_DONE
     66  1141		       85 09		      sta	level_completed
     67  1143
     68  1143							; delete squarebot
     69  1143		       20 66 14 	      jsr	delete_squarebot
     70  1146
     71  1146							; now set current_level to next_level
     72  1146		       a5 06		      lda	next_level
     73  1148		       85 04		      sta	current_level
     74  114a		       a5 07		      lda	next_level+1
     75  114c		       85 05		      sta	current_level+1
     76  114e
     77  114e		       a9 00		      lda	#0
     78  1150		       85 30		      sta	count_chars_drawn
     79  1152
     80  1152				   dont_update
     81  1152							; now check if level reset was set
     82  1152		       a5 08		      lda	level_reset
     83  1154		       c9 00		      cmp	#0
     84  1156		       d0 01		      bne	continue_update	; if not, go back to game loop
     85  1158		       60		      rts
     86  1159
     87  1159				   continue_update
     88  1159							; if it was, update the level
     89  1159		       a9 17		      lda	#LEVEL_BEGINNING_LOW_BYTE
     90  115b		       85 00		      sta	screen_cursor
     91  115d		       a9 1e		      lda	#LEVEL_BEGINNING_HIGH_BYTE
     92  115f		       85 01		      sta	screen_cursor+1
     93  1161
     94  1161		       a9 17		      lda	#LEVEL_COLOR_BEGINNING_LOW_BYTE
     95  1163		       85 02		      sta	color_cursor
     96  1165		       a9 96		      lda	#LEVEL_COLOR_BEGINNING_HIGH_BYTE
     97  1167		       85 03		      sta	color_cursor+1
     98  1169
     99  1169		       a2 00		      ldx	#0
    100  116b		       a0 00		      ldy	#0
    101  116d		       84 0a		      sty	level_data_index
    102  116f
    103  116f		       a9 00		      lda	#0
    104  1171		       85 15		      sta	jump_num
    105  1173		       85 14		      sta	jump_dir
    106  1175		       85 1b		      sta	attached_powerups
    107  1177		       85 1c		      sta	attached_powerups+1
    108  1179		       85 1d		      sta	attached_powerups+2
    109  117b		       85 1e		      sta	attached_powerups+3
    110  117d		       85 16		      sta	tile_store
    111  117f		       85 17		      sta	tile_store+1
    112  1181		       85 18		      sta	tile_store+2
    113  1183		       85 19		      sta	tile_store+3
    114  1185		       85 1a		      sta	tile_store+4
    115  1187		       85 28		      sta	temp
    116  1189		       85 29		      sta	temp+1
    117  118b		       85 2a		      sta	temp+2
    118  118d		       85 2b		      sta	temp+3
    119  118f
    120  118f							; draw (or redraw on reset) the current level
    121  118f				   draw_level_loop
    122  118f							; y stores our index in the current level data
    123  118f		       20 94 12 	      jsr	check_if_level_cursor_at_end
    124  1192		       b0 10		      bcs	update_level_return
    125  1194
    126  1194		       a4 0a		      ldy	level_data_index
    127  1196		       b1 04		      lda	(current_level),y	; accumulator stores the number of times to repeat the next byte
    128  1198
    129  1198		       20 b2 11 	      jsr	draw_sequence
    130  119b
    131  119b		       a4 0a		      ldy	level_data_index
    132  119d		       c8		      iny		; set y to point to next length byte (iterate 2 at a time)
    133  119e		       c8		      iny
    134  119f		       84 0a		      sty	level_data_index
    135  11a1		       4c 8f 11 	      jmp	draw_level_loop
    136  11a4
    137  11a4
    138  11a4				   update_level_return
    139  11a4							; update next level pointer to point to byte after current level
    140  11a4		       a5 04		      lda	current_level
    141  11a6		       18		      clc
    142  11a7		       65 0a		      adc	level_data_index
    143  11a9		       85 06		      sta	next_level
    144  11ab		       a5 05		      lda	current_level+1
    145  11ad		       69 00		      adc	#0
    146  11af		       85 07		      sta	next_level+1
    147  11b1		       60		      rts
    148  11b2
    149  11b2
    150  11b2
    151  11b2				   draw_sequence
    152  11b2							; if acc == 0, return; otherwise subtract 1, draw the next 2 chars
    153  11b2		       f0 1c		      beq	draw_sequence_end
    154  11b4		       38		      sec
    155  11b5		       e9 01		      sbc	#1
    156  11b7		       48		      pha		; push accumulator onto stack
    157  11b8
    158  11b8		       a4 0a		      ldy	level_data_index
    159  11ba		       c8		      iny		; (so we can access the "element" byte after the length byte)
    160  11bb		       b1 04		      lda	(current_level),y	; get formatted byte (see squarebot doc)
    161  11bd		       0a		      asl		; lol
    162  11be		       0a		      asl
    163  11bf		       0a		      asl
    164  11c0		       0a		      asl
    165  11c1		       20 d1 11 	      jsr	draw_high_bits	; draw char represented by the 4 high bits
    166  11c4
    167  11c4		       a4 0a		      ldy	level_data_index
    168  11c6		       c8		      iny
    169  11c7
    170  11c7		       b1 04		      lda	(current_level),y
    171  11c9		       20 d1 11 	      jsr	draw_high_bits
    172  11cc
    173  11cc		       68		      pla
    174  11cd		       4c b2 11 	      jmp	draw_sequence
    175  11d0
    176  11d0				   draw_sequence_end
    177  11d0		       60		      rts
    178  11d1
    179  11d1
    180  11d1							; put the character in the high 4 bits of accumulator on screen (see readme), and move the color and screen cursors ahead
    181  11d1				   draw_high_bits
    182  11d1		       29 f0		      and	#240	; shave off last 4 bits
    183  11d3
    184  11d3		       c9 00		      cmp	#BLANK_SPACE
    185  11d5		       d0 08		      bne	check_if_starting_point
    186  11d7		       a9 00		      lda	#BLANK_TILE_CHAR	; todo; replace with actual chars
    187  11d9		       a2 01		      ldx	#1
    188  11db		       20 6f 12 	      jsr	draw_char_in_accumulator
    189  11de		       60		      rts
    190  11df
    191  11df				   check_if_starting_point
    192  11df		       c9 10		      cmp	#STARTING_POINT
    193  11e1		       d0 18		      bne	check_if_wall
    194  11e3
    195  11e3							; set squarebot to starting point
    196  11e3		       a5 00		      lda	screen_cursor
    197  11e5		       85 10		      sta	squarebot_position
    198  11e7		       a5 01		      lda	screen_cursor+1
    199  11e9		       85 11		      sta	squarebot_position+1
    200  11eb
    201  11eb		       a5 02		      lda	color_cursor
    202  11ed		       85 12		      sta	squarebot_color_position
    203  11ef		       a5 03		      lda	color_cursor+1
    204  11f1		       85 13		      sta	squarebot_color_position+1
    205  11f3
    206  11f3		       a9 13		      lda	#SQUAREBOT_CHAR
    207  11f5		       a2 02		      ldx	#SQUAREBOT_COLOR
    208  11f7		       20 6f 12 	      jsr	draw_char_in_accumulator
    209  11fa		       60		      rts
    210  11fb
    211  11fb				   check_if_wall
    212  11fb		       c9 20		      cmp	#WALL
    213  11fd		       d0 08		      bne	check_if_breakable_wall
    214  11ff		       a9 03		      lda	#WALL_CHAR
    215  1201		       a2 00		      ldx	#WALL_COLOR
    216  1203		       20 6f 12 	      jsr	draw_char_in_accumulator
    217  1206		       60		      rts
    218  1207
    219  1207				   check_if_breakable_wall
    220  1207		       c9 30		      cmp	#BREAKABLE_WALL
    221  1209		       d0 08		      bne	check_if_locked_wall
    222  120b		       a9 07		      lda	#BREAKABLE_WALL_CHAR
    223  120d		       a2 00		      ldx	#BREAKABLE_WALL_COLOR
    224  120f		       20 6f 12 	      jsr	draw_char_in_accumulator
    225  1212		       60		      rts
    226  1213
    227  1213				   check_if_locked_wall
    228  1213		       c9 40		      cmp	#LOCKED_WALL
    229  1215		       d0 08		      bne	check_if_ladder
    230  1217		       a9 06		      lda	#LOCKED_WALL_CHAR
    231  1219		       a2 00		      ldx	#LOCKED_WALL_COLOR
    232  121b		       20 6f 12 	      jsr	draw_char_in_accumulator
    233  121e		       60		      rts
    234  121f
    235  121f				   check_if_ladder
    236  121f		       c9 50		      cmp	#LADDER
    237  1221		       d0 08		      bne	check_if_exit
    238  1223		       a9 01		      lda	#LADDER_CHAR
    239  1225		       a2 00		      ldx	#LADDER_COLOR
    240  1227		       20 6f 12 	      jsr	draw_char_in_accumulator
    241  122a		       60		      rts
    242  122b
    243  122b				   check_if_exit
    244  122b		       c9 60		      cmp	#EXIT
    245  122d		       d0 08		      bne	check_if_locked_exit
    246  122f		       a9 04		      lda	#EXIT_CHAR
    247  1231		       a2 00		      ldx	#EXIT_COLOR
    248  1233		       20 6f 12 	      jsr	draw_char_in_accumulator
    249  1236		       60		      rts
    250  1237
    251  1237				   check_if_locked_exit
    252  1237		       c9 b0		      cmp	#LOCKED_EXIT
    253  1239		       d0 08		      bne	check_if_platform
    254  123b		       a9 05		      lda	#LOCKED_EXIT_CHAR
    255  123d		       a2 00		      ldx	#LOCKED_EXIT_COLOR
    256  123f		       20 6f 12 	      jsr	draw_char_in_accumulator
    257  1242		       60		      rts
    258  1243
    259  1243				   check_if_platform
    260  1243		       c9 70		      cmp	#PLATFORM
    261  1245		       d0 08		      bne	check_if_key
    262  1247		       a9 02		      lda	#PLATFORM_CHAR
    263  1249		       a2 00		      ldx	#PLATFORM_COLOR
    264  124b		       20 6f 12 	      jsr	draw_char_in_accumulator
    265  124e		       60		      rts
    266  124f
    267  124f				   check_if_key
    268  124f		       c9 80		      cmp	#KEY
    269  1251		       d0 08		      bne	check_if_spike
    270  1253		       a9 0a		      lda	#KEY_P_CHAR
    271  1255		       a2 00		      ldx	#KEY_P_COLOR
    272  1257		       20 6f 12 	      jsr	draw_char_in_accumulator
    273  125a		       60		      rts
    274  125b
    275  125b				   check_if_spike
    276  125b		       c9 90		      cmp	#SPIKE
    277  125d		       d0 08		      bne	check_if_booster
    278  125f		       a9 08		      lda	#SPIKE_CHAR
    279  1261		       a2 00		      ldx	#SPIKE_COLOR
    280  1263		       20 6f 12 	      jsr	draw_char_in_accumulator
    281  1266		       60		      rts
    282  1267
    283  1267				   check_if_booster
    284  1267		       a9 09		      lda	#BOOSTER_P_CHAR
    285  1269		       a2 00		      ldx	#BOOSTER_P_COLOR
    286  126b		       20 6f 12 	      jsr	draw_char_in_accumulator
    287  126e		       60		      rts
    288  126f
    289  126f
    290  126f
    291  126f							; char in accumulator goes in screen cursor, color in x register goes in color cursor, then update cursors
    292  126f
    293  126f				   draw_char_in_accumulator
    294  126f		       a0 00		      ldy	#0
    295  1271		       91 00		      sta	(screen_cursor),y
    296  1273
    297  1273		       8a		      txa
    298  1274		       91 02		      sta	(color_cursor),y
    299  1276
    300  1276		       20 c3 10 	      jsr	add_one_to_screen_cursor	; add to both screen and color cursor
    301  1279		       20 7d 12 	      jsr	update_screen_position_if_on_border
    302  127c		       60		      rts
    303  127d
    304  127d
    305  127d
    306  127d				   update_screen_position_if_on_border
    307  127d		       a5 30		      lda	count_chars_drawn
    308  127f		       c9 13		      cmp	#19
    309  1281		       d0 0b		      bne	add_and_return
    310  1283		       a9 00		      lda	#0
    311  1285		       85 30		      sta	count_chars_drawn
    312  1287		       20 c3 10 	      jsr	add_one_to_screen_cursor
    313  128a		       20 c3 10 	      jsr	add_one_to_screen_cursor
    314  128d		       60		      rts
    315  128e
    316  128e
    317  128e				   add_and_return
    318  128e		       18		      clc
    319  128f		       69 01		      adc	#1
    320  1291		       85 30		      sta	count_chars_drawn
    321  1293		       60		      rts
    322  1294
    323  1294				   check_if_level_cursor_at_end 		; set carry flag if screen_cursor at position $1ff9 (8185
    324  1294		       a5 00		      lda	screen_cursor	; load value at screen_cursor low byte
    325  1296		       c9 e5		      cmp	#END_OF_LEVEL_LOW_BYTE
    326  1298		       d0 06		      bne	check_if_level_cursor_at_end_return_false	; if low byte doesnt match, return with carry flag as neg
    327  129a
    328  129a		       a5 01		      lda	screen_cursor+1
    329  129c		       c9 1f		      cmp	#END_OF_LEVEL_HIGH_BYTE
    330  129e		       f0 02		      beq	check_if_level_cursor_at_end_return_true	; if high byte matches, set carry flag
    331  12a0
    332  12a0				   check_if_level_cursor_at_end_return_false
    333  12a0		       18		      clc
    334  12a1		       60		      rts
    335  12a2
    336  12a2				   check_if_level_cursor_at_end_return_true
    337  12a2		       38		      sec
    338  12a3		       60		      rts
------- FILE main.s
------- FILE updateGameState_new.s LEVEL 2 PASS 3
      0  12a4					      include	"updateGameState_new.s"
      1  12a4		       00 e4	   START_OF_FIRST_ROW_LOW_BYTE =	$e4
      2  12a4		       00 1f	   START_OF_FIRST_ROW_HIGH_BYTE =	$1f
      3  12a4
      4  12a4							; main logic until line 113:
      5  12a4				   update_game_state
      6  12a4		       a5 10		      lda	squarebot_position	; likely unnecessary
      7  12a6		       85 0b		      sta	new_position
      8  12a8		       a5 11		      lda	squarebot_position+1
      9  12aa		       85 0c		      sta	new_position+1
     10  12ac		       a5 12		      lda	squarebot_color_position
     11  12ae		       85 0d		      sta	new_color_position
     12  12b0		       a5 13		      lda	squarebot_color_position+1
     13  12b2		       85 0e		      sta	new_color_position+1
     14  12b4
     15  12b4				   jump_logic
     16  12b4		       a5 15		      lda	jump_num
     17  12b6		       c9 00		      cmp	#$00
     18  12b8		       f0 31		      beq	fall_logic
     19  12ba		       a2 00		      ldx	#0	; up
     20  12bc		       20 a1 13 	      jsr	move_dir
     21  12bf		       b0 07		      bcs	j_cont	; jump successful
     22  12c1		       a9 00		      lda	#$00	; jump failed
     23  12c3		       85 15		      sta	jump_num
     24  12c5		       4c 25 13 	      jmp	update_return
     25  12c8				   j_cont
     26  12c8		       38		      sec
     27  12c9		       c6 15		      dec	jump_num
     28  12cb				   j_left
     29  12cb		       a5 14		      lda	jump_dir
     30  12cd		       c9 01		      cmp	#$01
     31  12cf		       d0 0b		      bne	j_right
     32  12d1		       20 10 11 	      jsr	wait_until_next_frame
     33  12d4		       a2 02		      ldx	#2	; left
     34  12d6		       20 a1 13 	      jsr	move_dir
     35  12d9		       4c 25 13 	      jmp	update_return
     36  12dc				   j_right
     37  12dc		       c9 02		      cmp	#$02
     38  12de		       d0 45		      bne	update_return
     39  12e0		       20 10 11 	      jsr	wait_until_next_frame
     40  12e3		       a2 03		      ldx	#3	; right
     41  12e5		       20 a1 13 	      jsr	move_dir
     42  12e8		       4c 25 13 	      jmp	update_return
     43  12eb
     44  12eb				   fall_logic
     45  12eb		       a5 17		      lda	tile_store+1	; down
     46  12ed		       20 4b 14 	      jsr	fall_check	; check if we hit the ground, different from collision_handler since platforms are included
     47  12f0		       90 3f		      bcc	check_if_space_pressed
     48  12f2		       a2 01		      ldx	#1	; down
     49  12f4		       20 a1 13 	      jsr	move_dir
     50  12f7		       a5 17		      lda	tile_store+1	; check if we hit ground again, if we didn't we can move in the jump_dir
     51  12f9		       20 4b 14 	      jsr	fall_check
     52  12fc		       b0 07		      bcs	f_left
     53  12fe		       a9 00		      lda	#$00	; otherwise we stay still
     54  1300		       85 14		      sta	jump_dir
     55  1302		       4c 25 13 	      jmp	update_return
     56  1305				   f_left
     57  1305		       a5 14		      lda	jump_dir
     58  1307		       c9 01		      cmp	#$01
     59  1309		       d0 0b		      bne	f_right
     60  130b		       20 10 11 	      jsr	wait_until_next_frame
     61  130e		       a2 02		      ldx	#2	; left
     62  1310		       20 a1 13 	      jsr	move_dir
     63  1313		       4c 25 13 	      jmp	update_return
     64  1316				   f_right
     65  1316		       c9 02		      cmp	#$02
     66  1318		       d0 0b		      bne	update_return
     67  131a		       20 10 11 	      jsr	wait_until_next_frame
     68  131d		       a2 03		      ldx	#3	; right
     69  131f		       20 a1 13 	      jsr	move_dir
     70  1322		       4c 25 13 	      jmp	update_return
     71  1325
     72  1325				   update_return
     73  1325		       18		      clc		; reset numbers that should be
     74  1326		       a9 00		      lda	#0
     75  1328		       85 28		      sta	temp
     76  132a		       85 29		      sta	temp+1
     77  132c		       85 2a		      sta	temp+2
     78  132e		       85 2b		      sta	temp+3
     79  1330		       60		      rts
     80  1331
     81  1331				   check_if_space_pressed
     82  1331		       a9 00		      lda	#$00
     83  1333		       85 14		      sta	jump_dir	; double check we aren't falling in a direction
     84  1335		       a5 c5		      lda	currently_pressed_key
     85  1337		       c9 20		      cmp	#SPACE_KEY
     86  1339		       d0 12		      bne	check_if_q_pressed
     87  133b		       a2 00		      ldx	#0	; up
     88  133d		       20 a1 13 	      jsr	move_dir
     89  1340		       90 e3		      bcc	update_return	; jump failed
     90  1342		       a9 01		      lda	#JUMP_SIZE
     91  1344		       85 15		      sta	jump_num
     92  1346		       a9 00		      lda	#$00
     93  1348		       85 14		      sta	jump_dir
     94  134a		       4c 25 13 	      jmp	update_return
     95  134d
     96  134d				   check_if_q_pressed
     97  134d		       c9 30		      cmp	#Q_KEY
     98  134f		       d0 1a		      bne	check_if_e_pressed
     99  1351		       a2 00		      ldx	#0	; up
    100  1353		       20 a1 13 	      jsr	move_dir
    101  1356		       90 cd		      bcc	update_return	; jump failed
    102  1358		       a9 01		      lda	#JUMP_SIZE
    103  135a		       85 15		      sta	jump_num
    104  135c		       a9 01		      lda	#$01
    105  135e		       85 14		      sta	jump_dir
    106  1360		       20 10 11 	      jsr	wait_until_next_frame
    107  1363		       a2 02		      ldx	#2	; left
    108  1365		       20 a1 13 	      jsr	move_dir
    109  1368		       4c 25 13 	      jmp	update_return
    110  136b
    111  136b				   check_if_e_pressed
    112  136b		       c9 31		      cmp	#E_KEY
    113  136d		       d0 1a		      bne	check_if_a_pressed
    114  136f		       a2 00		      ldx	#0	; up
    115  1371		       20 a1 13 	      jsr	move_dir
    116  1374		       90 af		      bcc	update_return	; jump failed
    117  1376		       a9 01		      lda	#JUMP_SIZE
    118  1378		       85 15		      sta	jump_num
    119  137a		       a9 02		      lda	#$02
    120  137c		       85 14		      sta	jump_dir
    121  137e		       20 10 11 	      jsr	wait_until_next_frame
    122  1381		       a2 03		      ldx	#3	; right
    123  1383		       20 a1 13 	      jsr	move_dir
    124  1386		       4c 25 13 	      jmp	update_return
    125  1389
    126  1389				   check_if_a_pressed
    127  1389		       c9 11		      cmp	#A_KEY
    128  138b		       d0 08		      bne	check_if_d_pressed
    129  138d		       a2 02		      ldx	#2	; left
    130  138f		       20 a1 13 	      jsr	move_dir
    131  1392		       4c 25 13 	      jmp	update_return
    132  1395
    133  1395				   check_if_d_pressed
    134  1395		       c9 12		      cmp	#D_KEY
    135  1397		       d0 8c		      bne	update_return
    136  1399		       a2 03		      ldx	#3	; right
    137  139b		       20 a1 13 	      jsr	move_dir
    138  139e		       4c 25 13 	      jmp	update_return
    139  13a1
    140  13a1							; The rest is subroutines
    141  13a1
    142  13a1							;current bugs:
    143  13a1							;attached powerup sprites are not working
    144  13a1							;jump direction is not reset properly
    145  13a1							;platforms get deleted sometimes
    146  13a1							;need to replace end screen
    147  13a1
    148  13a1
    149  13a1
    150  13a1							;store tile you are moving to
    151  13a1							;if you win, win
    152  13a1							;check collision:
    153  13a1							;  store powerup in temp
    154  13a1							;  return whether you can move or not
    155  13a1							;if you can't move, return false
    156  13a1							;apply powerups you moved into
    157  13a1							;get new position
    158  13a1							;refresh tiles
    159  13a1							;apply powerup logic
    160  13a1							;delete old position
    161  13a1							;update position
    162  13a1							;redraw chars
    163  13a1							;draw new position
    164  13a1							;wait a jiffy maybe
    165  13a1							;check booster if we move again
    166  13a1				   move_dir
    167  13a1		       86 2c		      stx	move_dir_store
    168  13a3		       a9 00		      lda	#$00
    169  13a5		       85 28		      sta	temp
    170  13a7		       b5 16		      lda	tile_store_addr,x	; load colliding tile
    171  13a9		       c9 04		      cmp	#EXIT_CHAR
    172  13ab		       d0 09		      bne	spike_check
    173  13ad		       a9 01		      lda	#1	; level complete
    174  13af		       85 09		      sta	level_completed
    175  13b1		       85 08		      sta	level_reset
    176  13b3		       4c 13 14 	      jmp	return_false_move
    177  13b6				   spike_check
    178  13b6		       c9 08		      cmp	#SPIKE_CHAR
    179  13b8		       d0 07		      bne	cont_move
    180  13ba		       a9 01		      lda	#1
    181  13bc		       85 08		      sta	level_reset	; died
    182  13be		       4c 13 14 	      jmp	return_false_move
    183  13c1				   cont_move
    184  13c1		       20 15 14 	      jsr	collision_handler
    185  13c4		       90 4d		      bcc	return_false_move
    186  13c6		       a5 28		      lda	temp	; if we hit a powerup this will be its id
    187  13c8		       c9 00		      cmp	#$00
    188  13ca		       f0 06		      beq	post_powerup_move
    189  13cc		       95 1b		      sta	attached_powerups_addr,x	; attach powerup
    190  13ce		       a9 00		      lda	#$00
    191  13d0		       95 16		      sta	tile_store_addr,x	; remove the powerup tile from the level
    192  13d2				   post_powerup_move
    193  13d2		       20 66 14 	      jsr	delete_squarebot
    194  13d5		       a6 2c		      ldx	move_dir_store
    195  13d7		       20 7e 14 	      jsr	move_new_position
    196  13da		       20 9d 14 	      jsr	get_tiles
    197  13dd		       a9 01		      lda	#$01	; eor y with 1 to get opposite side
    198  13df		       45 2c		      eor	move_dir_store
    199  13e1		       aa		      tax
    200  13e2		       b5 1b		      lda	attached_powerups_addr,x	; ignite ready booster
    201  13e4		       c9 14		      cmp	#RBOOSTER_A_CHAR
    202  13e6		       d0 04		      bne	post_booster
    203  13e8		       a9 01		      lda	#$01	; ignited booster is a ladder because its not shown
    204  13ea		       95 1b		      sta	attached_powerups_addr,x
    205  13ec				   post_booster
    206  13ec		       20 d2 14 	      jsr	apply_powerup_logic
    207  13ef		       20 6e 15 	      jsr	update_squarebot
    208  13f2		       20 7f 15 	      jsr	update_chars
    209  13f5		       20 db 15 	      jsr	draw_squarebot
    210  13f8		       20 10 11 	      jsr	wait_until_next_frame
    211  13fb		       a9 01		      lda	#$01	; eor y with 1 to get opposite side
    212  13fd		       45 2c		      eor	move_dir_store
    213  13ff		       aa		      tax
    214  1400		       b5 1b		      lda	attached_powerups_addr,x
    215  1402		       c9 18		      cmp	#ABOOSTER_A_CHAR
    216  1404		       d0 0b		      bne	return_true_move	; if booster activated go again
    217  1406		       20 10 11 	      jsr	wait_until_next_frame	; give them time to see active booster
    218  1409		       20 10 11 	      jsr	wait_until_next_frame
    219  140c		       a6 2c		      ldx	move_dir_store
    220  140e		       4c a1 13 	      jmp	move_dir
    221  1411				   return_true_move
    222  1411		       38		      sec
    223  1412		       60		      rts		; return true move
    224  1413				   return_false_move
    225  1413		       18		      clc
    226  1414		       60		      rts
    227  1415
    228  1415							;-----
    229  1415				   collision_handler		; accumulator is the character in the position that squarebot wants to move to
    230  1415							; set carry flag if we can move to this char, otherwise clear it
    231  1415							; if its a powerup, set temp to be the attached_powerup id + attached_powerup id <<4, otherwise return since temp is already 0
    232  1415		       c9 00		      cmp	#BLANK_TILE_CHAR
    233  1417		       f0 2e		      beq	return_true
    234  1419		       c9 02		      cmp	#PLATFORM_CHAR
    235  141b		       f0 2a		      beq	return_true	; moving down will double check anyway
    236  141d		       c9 01		      cmp	#LADDER_CHAR
    237  141f		       f0 26		      beq	return_true	; not fully implemented though
    238  1421		       c9 03		      cmp	#WALL_CHAR
    239  1423		       f0 24		      beq	return_false
    240  1425		       c9 07		      cmp	#BREAKABLE_WALL_CHAR
    241  1427		       f0 20		      beq	return_false
    242  1429		       c9 05		      cmp	#LOCKED_EXIT_CHAR
    243  142b		       f0 1c		      beq	return_false
    244  142d		       c9 06		      cmp	#LOCKED_WALL_CHAR
    245  142f		       f0 18		      beq	return_false
    246  1431							;else its a powerup
    247  1431		       c9 09		      cmp	#BOOSTER_P_CHAR
    248  1433		       d0 07		      bne	rpk
    249  1435		       a9 14		      lda	#RBOOSTER_A_CHAR
    250  1437		       85 28		      sta	temp
    251  1439		       4c 47 14 	      jmp	return_true
    252  143c				   rpk
    253  143c		       c9 0a		      cmp	#KEY_P_CHAR
    254  143e		       d0 09		      bne	return_false
    255  1440		       a9 1c		      lda	#KEY_A_CHAR
    256  1442		       85 28		      sta	temp
    257  1444		       4c 47 14 	      jmp	return_true
    258  1447
    259  1447				   return_true
    260  1447		       38		      sec
    261  1448		       60		      rts
    262  1449
    263  1449				   return_false
    264  1449		       18		      clc
    265  144a		       60		      rts
    266  144b
    267  144b							;-----
    268  144b				   fall_check
    269  144b		       c9 02		      cmp	#PLATFORM_CHAR
    270  144d		       f0 fa		      beq	return_false
    271  144f		       c9 03		      cmp	#WALL_CHAR
    272  1451		       f0 f6		      beq	return_false
    273  1453		       c9 05		      cmp	#LOCKED_EXIT_CHAR
    274  1455		       f0 f2		      beq	return_false
    275  1457		       c9 06		      cmp	#LOCKED_WALL_CHAR
    276  1459		       f0 ee		      beq	return_false
    277  145b		       c9 07		      cmp	#BREAKABLE_WALL_CHAR
    278  145d		       f0 ea		      beq	return_false
    279  145f		       c9 01		      cmp	#LADDER_CHAR
    280  1461		       f0 e6		      beq	return_false
    281  1463		       4c 47 14 	      jmp	return_true	;
    282  1466
    283  1466							;-----
    284  1466				   delete_squarebot
    285  1466		       20 14 16 	      jsr	get_squarebot_draw_position
    286  1469		       a2 00		      ldx	#$0
    287  146b
    288  146b				   delete_loop
    289  146b		       b4 1f		      ldy	delta_addr,x
    290  146d		       b5 16		      lda	tile_store_addr,X
    291  146f		       91 10		      sta	(squarebot_position),y
    292  1471		       a9 00		      lda	#0	; EVERYTHING IS BLACK
    293  1473		       91 12		      sta	(squarebot_color_position),y
    294  1475
    295  1475		       e8		      inx
    296  1476		       e0 05		      cpx	#5
    297  1478		       d0 f1		      bne	delete_loop
    298  147a
    299  147a		       20 2f 16 	      jsr	get_squarebot_game_position
    300  147d		       60		      rts
    301  147e
    302  147e							;-----
    303  147e				   move_new_position
    304  147e		       20 4a 16 	      jsr	get_new_draw_position
    305  1481
    306  1481		       18		      clc
    307  1482		       a5 0b		      lda	new_position
    308  1484		       75 1f		      adc	delta_addr,x	; x is the index of the move_dir
    309  1486		       85 0b		      sta	new_position
    310  1488		       a5 0c		      lda	new_position+1
    311  148a		       69 00		      adc	#0
    312  148c		       85 0c		      sta	new_position+1
    313  148e		       18		      clc
    314  148f		       a5 0d		      lda	new_color_position
    315  1491		       75 1f		      adc	delta_addr,x
    316  1493		       85 0d		      sta	new_color_position
    317  1495		       a5 0e		      lda	new_color_position+1
    318  1497		       69 00		      adc	#0
    319  1499		       85 0e		      sta	new_color_position+1
    320  149b		       18		      clc
    321  149c		       60		      rts		; no need to undo get_new_draw_position
    322  149d
    323  149d							;-----
    324  149d				   get_tiles
    325  149d		       20 4a 16 	      jsr	get_new_draw_position
    326  14a0
    327  14a0		       a9 01		      lda	#$01	; eor move_dir with 1 to get opposite side
    328  14a2		       45 2c		      eor	move_dir_store
    329  14a4		       aa		      tax
    330  14a5		       a5 1a		      lda	tile_store+4	; get mid
    331  14a7		       95 16		      sta	tile_store_addr,x	; set opposite dir
    332  14a9
    333  14a9		       a6 2c		      ldx	move_dir_store
    334  14ab		       b5 16		      lda	tile_store_addr,x	;get dir
    335  14ad		       85 1a		      sta	tile_store+4	; set mid
    336  14af
    337  14af		       b5 1f		      lda	delta_addr,x
    338  14b1		       a8		      tay
    339  14b2		       b1 0b		      lda	(new_position),y	; get tile_dir
    340  14b4		       95 16		      sta	tile_store_addr,x	; set tile_dir
    341  14b6
    342  14b6		       a9 02		      lda	#$02	; get perpendicular tiles
    343  14b8		       45 2c		      eor	move_dir_store
    344  14ba		       aa		      tax		; eor move_dir with 2 to get perpendicular directions
    345  14bb		       b5 1f		      lda	delta_addr,x
    346  14bd		       a8		      tay
    347  14be		       b1 0b		      lda	(new_position),y
    348  14c0		       95 16		      sta	tile_store_addr,x
    349  14c2
    350  14c2		       a9 03		      lda	#$03
    351  14c4		       45 2c		      eor	move_dir_store
    352  14c6		       aa		      tax
    353  14c7		       b5 1f		      lda	delta_addr,x
    354  14c9		       a8		      tay
    355  14ca		       b1 0b		      lda	(new_position),y
    356  14cc		       95 16		      sta	tile_store_addr,x
    357  14ce
    358  14ce		       20 65 16 	      jsr	get_new_game_position
    359  14d1		       60		      rts
    360  14d2
    361  14d2							;-----
    362  14d2				   apply_powerup_logic
    363  14d2							;call prepare_logic for index temp+3 = 0,1,2, and 3. store index in temp+3 since we change y often
    364  14d2		       a9 00		      lda	#$0
    365  14d4		       85 2b		      sta	temp+3
    366  14d6		       aa		      tax
    367  14d7		       20 f5 14 	      jsr	prepare_logic
    368  14da		       e6 2b		      inc	temp+3
    369  14dc		       20 f5 14 	      jsr	prepare_logic
    370  14df		       e6 2b		      inc	temp+3
    371  14e1		       20 f5 14 	      jsr	prepare_logic
    372  14e4		       e6 2b		      inc	temp+3
    373  14e6		       20 f5 14 	      jsr	prepare_logic
    374  14e9		       a9 00		      lda	#$0
    375  14eb		       85 28		      sta	temp
    376  14ed		       85 29		      sta	temp+1
    377  14ef		       85 2a		      sta	temp+2
    378  14f1		       85 2b		      sta	temp+3
    379  14f3		       aa		      tax		; clean up just to be safe
    380  14f4		       60		      rts
    381  14f5
    382  14f5							;temp = powerup,   temp+1 = tile behind powerup,   temp+2 = tile opposite powerup
    383  14f5				   prepare_logic
    384  14f5		       a6 2b		      ldx	temp+3
    385  14f7		       b5 1b		      lda	attached_powerups_addr,x
    386  14f9		       85 28		      sta	temp
    387  14fb		       b5 16		      lda	tile_store_addr,x
    388  14fd		       85 29		      sta	temp+1
    389  14ff		       a9 01		      lda	#$01
    390  1501		       45 2b		      eor	temp+3
    391  1503		       aa		      tax		; eor with 1 which gets us the tile opposite the powerup
    392  1504		       b5 16		      lda	tile_store_addr,x
    393  1506		       85 2a		      sta	temp+2
    394  1508		       20 1f 15 	      jsr	powerup_logic	; perform logic
    395  150b		       a6 2b		      ldx	temp+3
    396  150d		       a5 28		      lda	temp
    397  150f		       95 1b		      sta	attached_powerups_addr,x
    398  1511		       a5 29		      lda	temp+1
    399  1513		       95 16		      sta	tile_store_addr,x
    400  1515		       a9 01		      lda	#$01
    401  1517		       45 2b		      eor	temp+3
    402  1519		       aa		      tax
    403  151a		       a5 2a		      lda	temp+2
    404  151c		       95 16		      sta	tile_store_addr,x
    405  151e		       60		      rts
    406  151f
    407  151f							; ready booster: does nothing
    408  151f							; ignited booster: breaks breakable walls and changes to active booster
    409  151f							; active booster: breaks breakable walls and changes to ready booster
    410  151f							; key: spends itself to break locked walls
    411  151f				   powerup_logic		;temp = powerup,   temp+1 = tile behind powerup,   temp+2 = tile opposite powerup
    412  151f		       a5 28		      lda	temp
    413  1521		       c9 01		      cmp	#$01	; check ignited booster
    414  1523		       d0 11		      bne	pl_b
    415  1525		       a5 2a		      lda	temp+2	; check opposite tile
    416  1527		       c9 07		      cmp	#BREAKABLE_WALL_CHAR
    417  1529		       d0 04		      bne	pl_ab
    418  152b		       a9 00		      lda	#BLANK_TILE_CHAR
    419  152d		       85 2a		      sta	temp+2	; delete wall
    420  152f				   pl_ab
    421  152f		       a9 18		      lda	#ABOOSTER_A_CHAR	; set active booster
    422  1531		       85 28		      sta	temp
    423  1533		       4c 6d 15 	      jmp	pl_return
    424  1536				   pl_b
    425  1536		       c9 18		      cmp	#ABOOSTER_A_CHAR	; check active booster
    426  1538		       d0 11		      bne	pl_k
    427  153a		       a5 2a		      lda	temp+2	; check opposite tile
    428  153c		       c9 07		      cmp	#BREAKABLE_WALL_CHAR
    429  153e		       d0 04		      bne	pl_rb
    430  1540		       a9 00		      lda	#BLANK_TILE_CHAR
    431  1542		       85 2a		      sta	temp+2	; delete wall
    432  1544				   pl_rb
    433  1544		       a9 14		      lda	#RBOOSTER_A_CHAR	; set ready booster
    434  1546		       85 28		      sta	temp
    435  1548		       4c 6d 15 	      jmp	pl_return
    436  154b				   pl_k
    437  154b		       c9 1c		      cmp	#KEY_A_CHAR	; check key, slightly unnecessary
    438  154d		       d0 1e		      bne	pl_return
    439  154f		       a5 29		      lda	temp+1
    440  1551		       c9 06		      cmp	#LOCKED_WALL_CHAR
    441  1553		       d0 09		      bne	pl_ke
    442  1555		       a9 00		      lda	#BLANK_TILE_CHAR
    443  1557		       85 28		      sta	temp	; delete key
    444  1559		       85 29		      sta	temp+1	; delete wall
    445  155b		       4c 6d 15 	      jmp	pl_return
    446  155e				   pl_ke
    447  155e		       c9 05		      cmp	#LOCKED_EXIT_CHAR
    448  1560		       d0 0b		      bne	pl_return
    449  1562		       a9 00		      lda	#BLANK_TILE_CHAR
    450  1564		       85 28		      sta	temp
    451  1566		       a9 04		      lda	#EXIT_CHAR
    452  1568		       85 29		      sta	temp+1
    453  156a		       4c 6d 15 	      jmp	pl_return
    454  156d				   pl_return
    455  156d		       60		      rts
    456  156e
    457  156e							;-----
    458  156e				   update_squarebot
    459  156e		       a5 0b		      lda	new_position
    460  1570		       85 10		      sta	squarebot_position
    461  1572		       a5 0c		      lda	new_position+1
    462  1574		       85 11		      sta	squarebot_position+1
    463  1576
    464  1576		       a5 0d		      lda	new_color_position
    465  1578		       85 12		      sta	squarebot_color_position
    466  157a		       a5 0e		      lda	new_color_position+1
    467  157c		       85 13		      sta	squarebot_color_position+1
    468  157e		       60		      rts
    469  157f
    470  157f							;-----
    471  157f				   update_chars 		; chareor = tile*8,   chareor+1 = powerup*8,	chareor+2 = char*8
    472  157f		       a2 00		      ldx	#$00
    473  1581		       86 28		      stx	temp
    474  1583
    475  1583				   update_char_dir_loop
    476  1583		       b5 16		      lda	tile_store_addr,x
    477  1585		       0a		      asl
    478  1586		       0a		      asl
    479  1587		       0a		      asl		; multiply by 8 since there are 8 bytes per character
    480  1588		       85 2d		      sta	chareor
    481  158a		       b5 24		      lda	chars_addr,x
    482  158c		       0a		      asl
    483  158d		       0a		      asl
    484  158e		       0a		      asl
    485  158f		       85 2f		      sta	chareor+2
    486  1591		       b5 1b		      lda	attached_powerups_addr,x
    487  1593		       c9 00		      cmp	#$00
    488  1595		       f0 03		      beq	no_powerup
    489  1597		       18		      clc		;add index for rotation
    490  1598		       65 28		      adc	temp
    491  159a				   no_powerup
    492  159a		       0a		      asl
    493  159b		       0a		      asl
    494  159c		       0a		      asl
    495  159d		       85 2e		      sta	chareor+1
    496  159f		       20 ab 15 	      jsr	update_char
    497  15a2		       e6 28		      inc	temp
    498  15a4		       a6 28		      ldx	temp
    499  15a6
    500  15a6		       e0 04		      cpx	#4
    501  15a8		       d0 d9		      bne	update_char_dir_loop
    502  15aa
    503  15aa		       60		      rts
    504  15ab
    505  15ab				   update_char		; chareor = tile*8,   chareor+1 = powerup*8,	chareor+2 = char*8
    506  15ab		       a9 00		      lda	#$00
    507  15ad		       85 29		      sta	temp+1
    508  15af				   update_char_loop
    509  15af		       a5 29		      lda	temp+1
    510  15b1		       18		      clc
    511  15b2		       65 2d		      adc	chareor
    512  15b4		       a8		      tay
    513  15b5		       b9 00 1c 	      lda	character_set_begin,y
    514  15b8		       85 2a		      sta	temp+2
    515  15ba
    516  15ba		       a5 29		      lda	temp+1
    517  15bc		       18		      clc
    518  15bd		       65 2e		      adc	chareor+1
    519  15bf		       a8		      tay
    520  15c0		       b9 00 1c 	      lda	character_set_begin,y
    521  15c3		       45 2a		      eor	temp+2
    522  15c5		       85 2a		      sta	temp+2
    523  15c7
    524  15c7		       a5 29		      lda	temp+1
    525  15c9		       18		      clc
    526  15ca		       65 2f		      adc	chareor+2
    527  15cc		       a8		      tay
    528  15cd		       a5 2a		      lda	temp+2
    529  15cf		       99 00 1c 	      sta	character_set_begin,y
    530  15d2
    531  15d2		       e6 29		      inc	temp+1
    532  15d4		       a5 29		      lda	temp+1
    533  15d6		       c9 08		      cmp	#8
    534  15d8		       d0 d5		      bne	update_char_loop
    535  15da
    536  15da		       60		      rts
    537  15db
    538  15db							; if there is a powerup:
    539  15db							; for each of 8 bytes:
    540  15db							; load tile byte
    541  15db							; eor with powerup tile byte
    542  15db							; store in char byte
    543  15db
    544  15db							;-----
    545  15db				   draw_squarebot
    546  15db		       20 14 16 	      jsr	get_squarebot_draw_position
    547  15de
    548  15de		       a5 24		      lda	chars	;u
    549  15e0		       a4 1f		      ldy	delta
    550  15e2		       91 10		      sta	(squarebot_position),y
    551  15e4		       a9 00		      lda	#0
    552  15e6		       91 12		      sta	(squarebot_color_position),y
    553  15e8
    554  15e8		       a5 25		      lda	chars+1
    555  15ea		       a4 20		      ldy	delta+1	;d
    556  15ec		       91 10		      sta	(squarebot_position),y
    557  15ee		       a9 00		      lda	#0
    558  15f0		       91 12		      sta	(squarebot_color_position),y
    559  15f2
    560  15f2		       a5 26		      lda	chars+2
    561  15f4		       a4 21		      ldy	delta+2	;l
    562  15f6		       91 10		      sta	(squarebot_position),y
    563  15f8		       a9 00		      lda	#0
    564  15fa		       91 12		      sta	(squarebot_color_position),y
    565  15fc
    566  15fc		       a5 27		      lda	chars+3
    567  15fe		       a4 22		      ldy	delta+3	;r
    568  1600		       91 10		      sta	(squarebot_position),y
    569  1602		       a9 00		      lda	#0
    570  1604		       91 12		      sta	(squarebot_color_position),y
    571  1606
    572  1606		       a9 13		      lda	#SQUAREBOT_CHAR
    573  1608		       a4 23		      ldy	delta+4	;m
    574  160a		       91 10		      sta	(squarebot_position),y
    575  160c		       a9 02		      lda	#SQUAREBOT_COLOR
    576  160e		       91 12		      sta	(squarebot_color_position),y
    577  1610
    578  1610		       20 2f 16 	      jsr	get_squarebot_game_position
    579  1613		       60		      rts
------- FILE main.s
------- FILE updateGameStateHelper.s LEVEL 2 PASS 3
      0  1614					      include	"updateGameStateHelper.s"
      1  1614							; Helper functions for updateGameState
      2  1614
      3  1614				   get_squarebot_draw_position
      4  1614		       38		      sec
      5  1615		       a5 10		      lda	squarebot_position
      6  1617		       e9 17		      sbc	#[ROW_SIZE+1]
      7  1619		       85 10		      sta	squarebot_position
      8  161b		       a5 11		      lda	squarebot_position+1
      9  161d		       e9 00		      sbc	#0
     10  161f		       85 11		      sta	squarebot_position+1
     11  1621		       38		      sec
     12  1622		       a5 12		      lda	squarebot_color_position
     13  1624		       e9 17		      sbc	#[ROW_SIZE+1]
     14  1626		       85 12		      sta	squarebot_color_position
     15  1628		       a5 13		      lda	squarebot_color_position+1
     16  162a		       e9 00		      sbc	#0
     17  162c		       85 13		      sta	squarebot_color_position+1
     18  162e		       60		      rts
     19  162f
     20  162f				   get_squarebot_game_position
     21  162f		       18		      clc
     22  1630		       a5 10		      lda	squarebot_position
     23  1632		       69 17		      adc	#[ROW_SIZE+1]
     24  1634		       85 10		      sta	squarebot_position
     25  1636		       a5 11		      lda	squarebot_position+1
     26  1638		       69 00		      adc	#0
     27  163a		       85 11		      sta	squarebot_position+1
     28  163c		       18		      clc
     29  163d		       a5 12		      lda	squarebot_color_position
     30  163f		       69 17		      adc	#[ROW_SIZE+1]
     31  1641		       85 12		      sta	squarebot_color_position
     32  1643		       a5 13		      lda	squarebot_color_position+1
     33  1645		       69 00		      adc	#0
     34  1647		       85 13		      sta	squarebot_color_position+1
     35  1649		       60		      rts
     36  164a
     37  164a				   get_new_draw_position
     38  164a		       38		      sec
     39  164b		       a5 0b		      lda	new_position
     40  164d		       e9 17		      sbc	#[ROW_SIZE+1]
     41  164f		       85 0b		      sta	new_position
     42  1651		       a5 0c		      lda	new_position+1
     43  1653		       e9 00		      sbc	#0
     44  1655		       85 0c		      sta	new_position+1
     45  1657		       38		      sec
     46  1658		       a5 0d		      lda	new_color_position
     47  165a		       e9 17		      sbc	#[ROW_SIZE+1]
     48  165c		       85 0d		      sta	new_color_position
     49  165e		       a5 0e		      lda	new_color_position+1
     50  1660		       e9 00		      sbc	#0
     51  1662		       85 0e		      sta	new_color_position+1
     52  1664		       60		      rts
     53  1665
     54  1665				   get_new_game_position
     55  1665		       18		      clc
     56  1666		       a5 0b		      lda	new_position
     57  1668		       69 17		      adc	#[ROW_SIZE+1]
     58  166a		       85 0b		      sta	new_position
     59  166c		       a5 0c		      lda	new_position+1
     60  166e		       69 00		      adc	#0
     61  1670		       85 0c		      sta	new_position+1
     62  1672		       18		      clc
     63  1673		       a5 0d		      lda	new_color_position
     64  1675		       69 17		      adc	#[ROW_SIZE+1]
     65  1677		       85 0d		      sta	new_color_position
     66  1679		       a5 0e		      lda	new_color_position+1
     67  167b		       69 00		      adc	#0
     68  167d		       85 0e		      sta	new_color_position+1
     69  167f		       60		      rts
------- FILE main.s
    181  1680
    182  1680				   compressed_screen_data_start
    183  1680					      incbin	"../data/titleScreenData_compressed"
    184  1730
    185  1730				   level_data_start
    186  1730					      incbin	"../data/levels/binary_levels/jesse_1"
    187  173a					      incbin	"../data/levels/binary_levels/jesse_2"
    188  1754					      incbin	"../data/levels/binary_levels/jesse_3"
    189  179e					      incbin	"../data/levels/binary_levels/amin_1"
    190  17d2					      incbin	"../data/levels/binary_levels/amin_2"
    191  180e					      incbin	"../data/levels/binary_levels/amin_3"
    192  183c					      incbin	"../data/levels/binary_levels/amin_4"
    193  187a					      incbin	"../data/levels/binary_levels/jesse_4"
    194  18c0					      incbin	"../data/levels/binary_levels/jesse_5"
    195  191a					      incbin	"../data/levels/binary_levels/jesse_6"
    196  198c					      incbin	"../data/levels/binary_levels/jesse_7"
    197  19a6
    198  19a6							;copy paste script: python generateLevelBinary.py ascii_levels/<> binary_levels/<>
    199  19a6
    200  1c00					      org	character_set_begin
    201  1c00		       00 00 00 00*	      BYTE.b	$00, $00, $00, $00, $00, $00, $00, $00	; blank 0
    202  1c08		       7e 42 7e 42*	      BYTE.b	$7E, $42, $7E, $42, $7E, $42, $7E, $42	; ladder 1
    203  1c10		       ff 5a 00 00*	      BYTE.b	$FF, $5A, $00, $00, $00, $00, $00, $00	; platform 2
    204  1c18		       ff ff ff ff*	      BYTE.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF	; wall 3
    205  1c20		       00 3c 62 5e*	      BYTE.b	0,60,98,94,86,102,60,0	; exit (door) 4
    206  1c28		       ff 81 9d a1*	      BYTE.b	255,129,157,161,173,153,129,255	; locked exit 5
    207  1c30		       ff e7 db db*	      BYTE.b	255,231,219,219,129,129,129,255	; locked wall 6
    208  1c38		       ff ee f1 ef*	      BYTE.b	$FF, $EE, $F1, $EF, $57, $8F, $F3, $FF	; breakable wall 7
    209  1c40		       12 d6 7c 3f*	      BYTE.b	18,214,124,63,252,62,107,72	; spike ball 8 		    PETSCII WHY?? I CAN'T READ THIS!
    210  1c48		       18 3c 3c 3c*	      BYTE.b	24,60,60,60,126,82,8,36	; booster powerup 9
    211  1c50		       18 24 24 18*	      BYTE.b	24,36,36,24,16,24,16,24	; key powerup A
    212  1c58		       00 00 00 00*	      BYTE.b	$00, $00, $00, $00, $00, $00, $00, $00	; empty B
    213  1c60		       00 00 00 00*	      BYTE.b	$00, $00, $00, $00, $00, $00, $00, $00	; empty C
    214  1c68		       00 00 00 00*	      BYTE.b	$00, $00, $00, $00, $00, $00, $00, $00	; empty D
    215  1c70		       00 00 00 00*	      BYTE.b	$00, $00, $00, $00, $00, $00, $00, $00	; empty E
    216  1c78
    217  1c78		       00 00 00 00*	      BYTE.b	$00, $00, $00, $00, $00, $00, $00, $00	; charU F
    218  1c80		       00 00 00 00*	      BYTE.b	$00, $00, $00, $00, $00, $00, $00, $00	; charD 10
    219  1c88		       00 00 00 00*	      BYTE.b	$00, $00, $00, $00, $00, $00, $00, $00	; charL 11
    220  1c90		       00 00 00 00*	      BYTE.b	$00, $00, $00, $00, $00, $00, $00, $00	; charR 12
    221  1c98		       ff 81 a5 81*	      BYTE.b	$FF, $81, $A5, $81, $BD, $81, $81, $FF	; squarebot 13
    222  1ca0
    223  1ca0							; attachments
    224  1ca0		       00 00 00 00*	      BYTE.b	0,0,0,0,195,126,126,60	; ready booster attachment up 14
    225  1ca8		       3c 7e 7e c3*	      BYTE.b	60,126,126,195,0,0,0,0	; rb down 15
    226  1cb0		       08 0e 07 07*	      BYTE.b	8,14,7,7,7,7,14,8	; rb left 16
    227  1cb8		       10 70 e0 e0*	      BYTE.b	16,112,224,224,224,224,112,16	; rb right 17
    228  1cc0		       3c 7e 3c 18*	      BYTE.b	60,126,60,24,219,126,126,60	; active booster attachment up 18
    229  1cc8		       3c 7e 7e db*	      BYTE.b	60,126,126,219,24,60,126,60	; ab down 19
    230  1cd0		       08 4e e7 ff*	      BYTE.b	8,78,231,255,255,231,78,8	; ab left 1A
    231  1cd8		       10 72 e7 ff*	      BYTE.b	16,114,231,255,255,231,114,16	; ab right 1B
    232  1ce0		       00 1e 14 1e*	      BYTE.b	0,30,20,30,24,24,24,60	; key attachment up 1C
    233  1ce8		       3c 18 18 18*	      BYTE.b	60,24,24,24,30,20,30,0	; key down 1D
    234  1cf0		       00 00 01 7f*	      BYTE.b	0,0,1,127,95,113,80,0	; key left 1E
    235  1cf8		       00 00 80 fe*	      BYTE.b	0,0,128,254,250,142,10,0	; key right 1F
    236  1d00
    237  1d00							; for the title screen.......
    238  1d00		       ff 80 80 80*	      BYTE.b	255,128,128,128,128,129,131,135	;20
    239  1d08		       ff 00 00 00*	      BYTE.b	255,0,0,0,192,224,48,248	;21
    240  1d10		       ff 00 00 00*	      BYTE.b	255,0,0,0,0,0,0,0	;22
    241  1d18		       ff 01 01 01*	      BYTE.b	255,1,1,1,1,1,1,1	;23
    242  1d20		       8f 9b 83 83*	      BYTE.b	143,155,131,131,128,128,128,128	;24
    243  1d28		       e0 e0 e0 e0*	      BYTE.b	224,224,224,224,0,0,0,0	;25
    244  1d30		       01 07 1f 07*	      BYTE.b	1,7,31,7,7,7,0,0	;26
    245  1d38		       f1 c1 c1 c1*	      BYTE.b	241,193,193,193,193,193,1,1	;27
    246  1d40		       80 80 81 80*	      BYTE.b	128,128,129,128,152,152,156,143	;28
    247  1d48		       00 00 c0 70*	      BYTE.b	0,0,192,112,30,3,0,255	;29
    248  1d50		       00 00 00 00*	      BYTE.b	0,0,0,0,0,128,240,28	;2A
    249  1d58		       01 01 01 01*	      BYTE.b	1,1,1,1,1,1,1,1	;2B
    250  1d60		       8f 9f 9f 9e*	      BYTE.b	143,159,159,158,128,128,128,255	;2C
    251  1d68		       ff 00 00 00*	      BYTE.b	255,0,0,0,0,0,0,255	;2D
    252  1d70		       07 00 00 00*	      BYTE.b	7,0,0,0,0,0,0,255	;2E
    253  1d78		       81 c1 01 01*	      BYTE.b	129,193,1,1,1,1,1,255	;2F
    254  1d80
------- FILE memoryCheck.s LEVEL 2 PASS 3
      0  1d80					      include	"memoryCheck.s"	; code to make sure the program isn't too large and enters screen memory
      1  1d80		       0d 7f	   BYTES_USED =	.-$1001	; location counter minus starting location = total bytes used
      2  1d80		       1e 00	   SCREEN_MEMORY_START =	$1e00
 3455 bytes used
      3  1d80					      echo	[BYTES_USED]d, "bytes used"
 Ending program at memory location (base 10):  7552
      4  1d80					      echo	"Ending program at memory location (base 10): ", [.]d
      5  1d80				  -	      if	. >= SCREEN_MEMORY_START	; if program entering screen memory
      6  1d80				  -	      echo	"Throwing error because program is too large, and has entered screen memory!"
      7  1d80				  -	      err
      8  1d80					      endif
------- FILE main.s
    256  1d80
    257  1d80
    258  1d80							;assume levels have borders
    259  1d80							;shift character set begin as far as i can
    260  1d80							;get rid of half-bytes
    261  1d80							;16 bit arithmetic
    262  1d80							;storing attachments in each rotation
    263  1d80							;store delta in an array so you can have a dynamic function that draws each character.
