------- FILE src/main.s LEVEL 1 PASS 3
      1  1c50 ????						; title screen program -- use hand-made compression method (esentially just RLE, see rleEncoding.py)
      2  1c50 ????				      processor	6502
      3  1c50 ????
      4 U0019 ????				      seg.u	ZP
      5 U0000					      org	$0
      6 U0000
      7 U0000
      8 U0000		       00 00	   screen_cursor ds.w	1	; stores the current screen memory address
      9 U0002		       00 00	   color_cursor ds.w	1	; store current color memory address
     10 U0004		       00 00	   current_level ds.w	1
     11 U0006		       00 00	   next_level ds.w	1
     12 U0008		       00	   level_reset ds.b	1
     13 U0009		       00	   level_completed ds.b	1
     14 U000a		       00	   level_data_index ds.b	1	; for temporarily saving index registers
     15 U000b		       00	   temp       ds.b	1	; for temporarily saving index registers
     16 U000c		       00 00	   new_position ds.w	1	; use to store position of (proposed) new location for squarebot
     17 U000e		       00 00	   new_color_position ds.w	1	; use to store position of (proposed) new location for squarebot
     18 U0010		       00	   current_time ds.b	1	; store only the last byte of the jiffy clock
     19 U0011		       00 00	   squarebot_position ds.w	1
     20 U0013		       00 00	   squarebot_color_position ds.w	1
     21 U0015		       00	   has_key    ds.b	1
     22 U0016		       00	   has_booster ds.b	1
     23 U0017		       00	   num_chars_jumped ds.b	1
     24 U0018		       00	   jump_direction ds.b	1	; 0 - going down, 1 - going up
     25  1c50 ????				      seg
     26  1c50 ????
     27  1c50 ????						; constants
     28  1c50 ????	       00 20	   BLANK_CHAR =	$20
     29  1c50 ????
     30  1c50 ????	       00 00	   SCREEN_CURSOR_BEGINNING_LOW_BYTE =	$00
     31  1c50 ????	       00 1e	   SCREEN_CURSOR_BEGINNING_HIGH_BYTE =	$1e
     32  1c50 ????
     33  1c50 ????						; last screen location
     34  1c50 ????	       00 fa	   END_OF_SCREEN_LOW_BYTE =	$fa
     35  1c50 ????	       00 1f	   END_OF_SCREEN_HIGH_BYTE =	$1f
     36  1c50 ????
     37  1c50 ????						; beginning of color memory
     38  1c50 ????	       00 00	   COLOR_CURSOR_BEGINNING_LOW_BYTE =	$00
     39  1c50 ????	       00 96	   COLOR_CURSOR_BEGINNING_HIGH_BYTE =	$96
     40  1c50 ????	       00 00	   RED_COLOR_CODE =	0
     41  1c50 ????
     42  1c50 ????	       00 20	   SPACE_KEY  =	$20
     43  1c50 ????	       00 09	   W_KEY      =	$09
     44  1c50 ????	       00 11	   A_KEY      =	$11
     45  1c50 ????	       00 29	   S_KEY      =	$29
     46  1c50 ????	       00 12	   D_KEY      =	$12
     47  1c50 ????	       00 0d	   SECRET_KEY =	$0d	; press P to skip to next  level
     48  1c50 ????
     49  1c50 ????
     50  1c50 ????						; memory locations
     51  1c50 ????	       10 01	   user_memory_start =	$1001
     52  1c50 ????	       00 c5	   currently_pressed_key =	$c5
     53  1c50 ????	       00 a0	   jiffy_clock =	$A0
     54  1c50 ????	       90 05	   character_info_register =	$9005
     55  1c50 ????	       1c 00	   character_set_begin =	$1c00
     56  1c50 ????
     57  1c50 ????						; begin location counter at 4096 (user memory)
     58  1001					      org	user_memory_start
------- FILE stub.s LEVEL 2 PASS 3
      0  1001					      include	"stub.s"	; stub contains BASIC sys cmd to run the machine language code
      1  1001		       00 9e	   SYS_CMD_TOKEN =	$9e
      2  1001		       00 0a	   STUB_LINE_NUMBER =	10
      3  1001							; BASIC stub -- SYS cmd to run machine language 
      4  1001		       0b 10		      dc.w	nextstmt	; link; beginning of basic
      5  1003		       0a 00		      dc.w	STUB_LINE_NUMBER	; line number 
      6  1005		       9e 34 31 30*	      dc.b	SYS_CMD_TOKEN, [start]d, 0	; token for sys with operand as address to "start" label
      7  100b				   nextstmt
      8  100b		       00 00		      dc.w	0
------- FILE src/main.s
     60  100d
     61  100d				   start
     62  100d							; use combination of RAM (first 128 chars at 7168) & ROM character set
     63  100d		       a9 ff		      lda	#255
     64  100f		       8d 05 90 	      sta	character_info_register
     65  1012
     66  1012							; initialize some variables in the zero page
     67  1012		       a9 01		      lda	#1
     68  1014		       85 08		      sta	level_reset
     69  1016		       a9 00		      lda	#0
     70  1018		       85 09		      sta	level_completed
     71  101a
     72  101a		       a9 d0		      lda	#<level_data_start
     73  101c		       85 04		      sta	current_level
     74  101e		       a9 12		      lda	#>level_data_start
     75  1020		       85 05		      sta	current_level+1
     76  1022
     77  1022		       a9 00		      lda	#0
     78  1024
     79  1024
------- FILE titleScreen.s LEVEL 2 PASS 3
      0  1024					      include	"titleScreen.s"
      1  1024				   display_title_screen
      2  1024		       a9 00		      lda	#SCREEN_CURSOR_BEGINNING_LOW_BYTE
      3  1026		       85 00		      sta	screen_cursor
      4  1028		       a9 1e		      lda	#SCREEN_CURSOR_BEGINNING_HIGH_BYTE	; store 1e in location 01
      5  102a		       85 01		      sta	screen_cursor+1
      6  102c
      7  102c		       a9 00		      lda	#COLOR_CURSOR_BEGINNING_LOW_BYTE
      8  102e		       85 02		      sta	color_cursor
      9  1030		       a9 96		      lda	#COLOR_CURSOR_BEGINNING_HIGH_BYTE
     10  1032		       85 03		      sta	color_cursor+1
     11  1034
     12  1034		       a0 00		      ldy	#$0	; to use for indirect indexed addressing
     13  1036		       a2 00		      ldx	#$0
     14  1038
     15  1038		       20 44 10 	      jsr	draw_title_screen_loop
     16  103b
     17  103b				   infinite_loop
     18  103b		       a5 c5		      lda	currently_pressed_key
     19  103d		       c9 20		      cmp	#SPACE_KEY
     20  103f		       f0 5c		      beq	gameLoop
     21  1041		       4c 3b 10 	      jmp	infinite_loop
     22  1044
     23  1044
     24  1044				   draw_title_screen_loop
     25  1044		       bd 68 12 	      lda	compressed_screen_data_start,X	; accumulator stores num times to repeat the byte
     26  1047		       20 52 10 	      jsr	draw_character	; draw the character that many times
     27  104a		       e8		      inx
     28  104b		       e8		      inx
     29  104c		       20 8d 10 	      jsr	check_if_screen_cursor_at_end
     30  104f		       90 f3		      bcc	draw_title_screen_loop
     31  1051		       60		      rts
     32  1052
     33  1052
     34  1052							; draw the character in Y register for (value of accumulator) number of times
     35  1052				   draw_character
     36  1052							; if accumulator == 0, return; otherwise, subtract 1 from accumulator and continue drawing the letter at Y
     37  1052		       f0 1d		      beq	draw_character_end
     38  1054		       38		      sec
     39  1055		       e9 01		      sbc	#1
     40  1057		       48		      pha		; push accumulator onto stack
     41  1058
     42  1058							; store current char at screen cursor location
     43  1058		       a0 00		      ldy	#0
     44  105a		       bd 69 12 	      lda	compressed_screen_data_start+1,X	; load cur char to draw
     45  105d		       18		      clc
     46  105e		       69 80		      adc	#128
     47  1060		       91 00		      sta	(screen_cursor),Y	; draw it on screen
     48  1062
     49  1062							; add color to the screen location if it's not a space
     50  1062							; because our title screen only has one color, and only displays it for characters that arent space, we can get away with this "optimization",
     51  1062							; and avoid adding color data
     52  1062		       c9 20		      cmp	#BLANK_CHAR
     53  1064		       f0 04		      beq	dont_color
     54  1066		       a9 00		      lda	#RED_COLOR_CODE
     55  1068		       91 02		      sta	(color_cursor),Y
     56  106a
     57  106a				   dont_color
     58  106a		       20 72 10 	      jsr	add_one_to_screen_cursor
     59  106d		       68		      pla		; put the current 'count' (remaining times to draw character) back on accumulator
     60  106e		       4c 52 10 	      jmp	draw_character
     61  1071
     62  1071				   draw_character_end
     63  1071		       60		      rts
     64  1072
     65  1072
     66  1072
     67  1072				   add_one_to_screen_cursor
     68  1072		       18		      clc
     69  1073		       a5 00		      lda	screen_cursor	; load and add to low byte
     70  1075		       69 01		      adc	#$1
     71  1077		       85 00		      sta	screen_cursor
     72  1079		       a5 01		      lda	screen_cursor+1
     73  107b		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
     74  107d		       85 01		      sta	screen_cursor+1
     75  107f
     76  107f							; add to color cursor as well
     77  107f		       18		      clc
     78  1080		       a5 02		      lda	color_cursor	; load and add to low byte
     79  1082		       69 01		      adc	#$1
     80  1084		       85 02		      sta	color_cursor
     81  1086		       a5 03		      lda	color_cursor+1
     82  1088		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
     83  108a		       85 03		      sta	color_cursor+1
     84  108c		       60		      rts
     85  108d
     86  108d				   check_if_screen_cursor_at_end		; set carry flag if screen_cursor at position $1ff9 (8185
     87  108d		       a5 00		      lda	screen_cursor	; load value at screen_cursor low byte
     88  108f		       c9 fa		      cmp	#END_OF_SCREEN_LOW_BYTE
     89  1091		       d0 06		      bne	check_if_screen_cursor_at_end_return_false	; if low byte doesnt match, return with carry flag as neg
     90  1093
     91  1093		       a5 01		      lda	screen_cursor+1
     92  1095		       c9 1f		      cmp	#END_OF_SCREEN_HIGH_BYTE
     93  1097		       f0 02		      beq	check_if_screen_cursor_at_end_return_true	; if high byte matches, set carry flag
     94  1099
     95  1099				   check_if_screen_cursor_at_end_return_false
     96  1099		       18		      clc
     97  109a		       60		      rts
     98  109b
     99  109b				   check_if_screen_cursor_at_end_return_true
    100  109b		       38		      sec
    101  109c		       60		      rts
------- FILE src/main.s
     81  109d
     82  109d
     83  109d							; title screen code jumps here once space pressed
     84  109d				   gameLoop
     85  109d		       20 d4 10 	      jsr	update_level
     86  10a0		       a9 00		      lda	#0
     87  10a2		       85 08		      sta	level_reset
     88  10a4		       20 df 11 	      jsr	update_game_state
     89  10a7		       20 c5 10 	      jsr	check_for_secret_key
     90  10aa		       20 bc 10 	      jsr	wait_until_next_frame
     91  10ad		       20 bc 10 	      jsr	wait_until_next_frame
     92  10b0		       20 bc 10 	      jsr	wait_until_next_frame
     93  10b3		       20 bc 10 	      jsr	wait_until_next_frame
     94  10b6		       20 bc 10 	      jsr	wait_until_next_frame
     95  10b9		       4c 9d 10 	      JMP	gameLoop
     96  10bc
     97  10bc
     98  10bc				   wait_until_next_frame		; wait one jiffy before completing game loop
     99  10bc		       a5 a2		      lda	jiffy_clock+2
    100  10be		       c5 10		      cmp	current_time
    101  10c0		       f0 fa		      beq	wait_until_next_frame
    102  10c2		       85 10		      sta	current_time
    103  10c4		       60		      rts
    104  10c5
    105  10c5							; update level_completed and level_reset if secret_key pressed
    106  10c5				   check_for_secret_key
    107  10c5		       a5 c5		      lda	currently_pressed_key
    108  10c7		       c9 0d		      cmp	#SECRET_KEY
    109  10c9		       d0 08		      bne	check_for_secret_key_return
    110  10cb		       a9 01		      lda	#1
    111  10cd		       85 09		      sta	level_completed
    112  10cf		       a9 01		      lda	#1
    113  10d1		       85 08		      sta	level_reset
    114  10d3
    115  10d3				   check_for_secret_key_return
    116  10d3		       60		      rts
    117  10d4
------- FILE updateLevel.s LEVEL 2 PASS 3
      0  10d4					      include	"updateLevel.s"
      1  10d4		       00 01	   LEVEL_IS_DONE =	1
      2  10d4		       00 00	   LEVEL_NOT_DONE =	0
      3  10d4		       00 01	   SHOULD_RESET =	1
      4  10d4		       00 00	   SHOULD_NOT_RESET =	0
      5  10d4
      6  10d4							; only first 4 bits really matter here; refer to readme for guide on lvl format
      7  10d4		       00 00	   BLANK_SPACE =	0	; 000000000
      8  10d4		       00 10	   STARTING_POINT =	16	; 00010000
      9  10d4		       00 20	   WALL       =	32	; 00100000
     10  10d4		       00 30	   BREAKABLE_WALL =	48	; 00110000
     11  10d4		       00 40	   LOCKED_WALL =	64	; 01000000
     12  10d4		       00 50	   LADDER     =	80	; 01010000
     13  10d4		       00 60	   EXIT       =	96	; 01100000
     14  10d4		       00 70	   PLATFORM   =	112	; 01110000
     15  10d4		       00 80	   KEY	      =	128	; 10000000
     16  10d4		       00 90	   SPIKE      =	144	; 10010000
     17  10d4		       00 a0	   BOOSTER    =	160	;  10100000
     18  10d4
     19  10d4		       00 00	   WALL_COLOR =	0
     20  10d4		       00 00	   BREAKABLE_WALL_COLOR =	0
     21  10d4		       00 00	   LOCKED_WALL_COLOR =	0
     22  10d4		       00 08	   LADDER_COLOR =	8
     23  10d4		       00 02	   EXIT_COLOR =	2
     24  10d4		       00 02	   PLATFORM_COLOR =	2
     25  10d4		       00 07	   KEY_COLOR  =	7
     26  10d4		       00 06	   SPIKE_COLOR =	6
     27  10d4		       00 03	   BOOSTER_COLOR =	3
     28  10d4
     29  10d4		       00 20	   BLANK_SPACE_CHAR =	$20
     30  10d4		       00 03	   WALL_CHAR  =	$3
     31  10d4		       00 07	   BREAKABLE_WALL_CHAR =	$7
     32  10d4		       00 06	   LOCKED_WALL_CHAR =	$6
     33  10d4		       00 00	   LADDER_CHAR =	$0
     34  10d4		       00 04	   EXIT_CHAR  =	$4
     35  10d4		       00 02	   PLATFORM_CHAR =	$2
     36  10d4		       00 05	   KEY_CHAR   =	$5
     37  10d4		       00 08	   SPIKE_CHAR =	$8
     38  10d4		       00 09	   BOOSTER_CHAR =	$9
     39  10d4
     40  10d4
     41  10d4				   update_level
     42  10d4							; check if the level is completed; set current_level to next_level if so
     43  10d4		       a5 09		      lda	level_completed
     44  10d6		       c9 01		      cmp	#LEVEL_IS_DONE	; (try optimizing later)
     45  10d8		       d0 0c		      bne	dont_update
     46  10da
     47  10da							; level is done; reset level completed
     48  10da		       a9 00		      lda	#LEVEL_NOT_DONE
     49  10dc		       85 09		      sta	level_completed
     50  10de
     51  10de							; now set current_level to next_level
     52  10de		       a5 06		      lda	next_level
     53  10e0		       85 04		      sta	current_level
     54  10e2		       a5 07		      lda	next_level+1
     55  10e4		       85 05		      sta	current_level+1
     56  10e6
     57  10e6				   dont_update
     58  10e6							; now check if level reset was set
     59  10e6		       a5 08		      lda	level_reset
     60  10e8		       c9 00		      cmp	#0
     61  10ea		       d0 01		      bne	continue_update	; if not, go back to game loop
     62  10ec		       60		      rts
     63  10ed
     64  10ed				   continue_update
     65  10ed							; if it was, update the level
     66  10ed		       a9 00		      lda	#SCREEN_CURSOR_BEGINNING_LOW_BYTE
     67  10ef		       85 00		      sta	screen_cursor
     68  10f1		       a9 1e		      lda	#SCREEN_CURSOR_BEGINNING_HIGH_BYTE
     69  10f3		       85 01		      sta	screen_cursor+1
     70  10f5
     71  10f5		       a9 00		      lda	#COLOR_CURSOR_BEGINNING_LOW_BYTE
     72  10f7		       85 02		      sta	color_cursor
     73  10f9		       a9 96		      lda	#COLOR_CURSOR_BEGINNING_HIGH_BYTE
     74  10fb		       85 03		      sta	color_cursor+1
     75  10fd
     76  10fd		       a2 00		      ldx	#0
     77  10ff		       a0 00		      ldy	#0
     78  1101		       84 0a		      sty	level_data_index
     79  1103							; draw (or redraw) the current level
     80  1103				   draw_level_loop
     81  1103							; y stores our index in the current level data
     82  1103		       a4 0a		      ldy	level_data_index
     83  1105		       b1 04		      lda	(current_level),y	; accumulator stores the number of times to repeat the next byte  
     84  1107
     85  1107		       20 23 11 	      jsr	draw_sequence
     86  110a
     87  110a		       a4 0a		      ldy	level_data_index
     88  110c		       c8		      iny		; set y to point to next length byte (iterate 2 at a time)
     89  110d		       c8		      iny
     90  110e		       84 0a		      sty	level_data_index
     91  1110
     92  1110
     93  1110		       20 8d 10 	      jsr	check_if_screen_cursor_at_end
     94  1113		       90 ee		      bcc	draw_level_loop
     95  1115
     96  1115
     97  1115							; update next level pointer to point to byte after current level
     98  1115		       a5 04		      lda	current_level
     99  1117		       18		      clc
    100  1118		       65 0a		      adc	level_data_index
    101  111a		       85 06		      sta	next_level
    102  111c		       a5 05		      lda	current_level+1
    103  111e		       69 00		      adc	#0
    104  1120		       85 07		      sta	next_level+1
    105  1122		       60		      rts
    106  1123
    107  1123
    108  1123
    109  1123							; i love writing decompression code in assembly. i love writing decompression code in assembly. i love writing decompression code in assembly. 
    110  1123				   draw_sequence
    111  1123							; if acc == 0, return; otherwise subtract 1, draw the next 2 chars
    112  1123		       f0 1c		      beq	draw_sequence_end
    113  1125		       38		      sec
    114  1126		       e9 01		      sbc	#1
    115  1128		       48		      pha		; push accumulator onto stack
    116  1129
    117  1129		       a4 0a		      ldy	level_data_index
    118  112b		       c8		      iny		; (so we can access the "element" byte after the length byte)
    119  112c		       b1 04		      lda	(current_level),y	; get formatted byte (see squarebot doc)
    120  112e		       0a		      asl		; lol
    121  112f		       0a		      asl
    122  1130		       0a		      asl
    123  1131		       0a		      asl
    124  1132		       20 42 11 	      jsr	draw_high_bits	; draw char represented by the 4 high bits
    125  1135
    126  1135		       a4 0a		      ldy	level_data_index
    127  1137		       c8		      iny
    128  1138
    129  1138		       b1 04		      lda	(current_level),y
    130  113a		       20 42 11 	      jsr	draw_high_bits
    131  113d
    132  113d		       68		      pla
    133  113e		       4c 23 11 	      jmp	draw_sequence
    134  1141
    135  1141				   draw_sequence_end
    136  1141		       60		      rts
    137  1142
    138  1142
    139  1142							; put the character in the high 4 bits of accumulator on screen (see readme), and move the color and screen cursors ahead
    140  1142				   draw_high_bits
    141  1142		       29 f0		      and	#240	; shave off last 4 bits
    142  1144
    143  1144		       c9 00		      cmp	#BLANK_SPACE
    144  1146		       d0 08		      bne	check_if_starting_point
    145  1148		       a9 20		      lda	#BLANK_SPACE_CHAR	; todo; replace with actual chars
    146  114a		       a2 01		      ldx	#1
    147  114c		       20 d4 11 	      jsr	draw_char_in_accumulator
    148  114f		       60		      rts
    149  1150
    150  1150				   check_if_starting_point
    151  1150		       c9 10		      cmp	#STARTING_POINT
    152  1152		       d0 18		      bne	check_if_wall
    153  1154
    154  1154							; set squarebot to starting point
    155  1154		       a5 00		      lda	screen_cursor
    156  1156		       85 11		      sta	squarebot_position
    157  1158		       a5 01		      lda	screen_cursor+1
    158  115a		       85 12		      sta	squarebot_position+1
    159  115c
    160  115c		       a5 02		      lda	color_cursor
    161  115e		       85 13		      sta	squarebot_color_position
    162  1160		       a5 03		      lda	color_cursor+1
    163  1162		       85 14		      sta	squarebot_color_position+1
    164  1164
    165  1164		       a9 01		      lda	#$1
    166  1166		       a2 02		      ldx	#SQUAREBOT_COLOR
    167  1168		       20 d4 11 	      jsr	draw_char_in_accumulator
    168  116b
    169  116b
    170  116b
    171  116b		       60		      rts
    172  116c
    173  116c				   check_if_wall
    174  116c		       c9 20		      cmp	#WALL
    175  116e		       d0 08		      bne	check_if_breakable_wall
    176  1170		       a9 03		      lda	#WALL_CHAR
    177  1172		       a2 00		      ldx	#WALL_COLOR
    178  1174		       20 d4 11 	      jsr	draw_char_in_accumulator
    179  1177		       60		      rts
    180  1178
    181  1178				   check_if_breakable_wall
    182  1178		       c9 30		      cmp	#BREAKABLE_WALL
    183  117a		       d0 08		      bne	check_if_locked_wall
    184  117c		       a9 07		      lda	#BREAKABLE_WALL_CHAR
    185  117e		       a2 00		      ldx	#BREAKABLE_WALL_COLOR
    186  1180		       20 d4 11 	      jsr	draw_char_in_accumulator
    187  1183		       60		      rts
    188  1184
    189  1184				   check_if_locked_wall
    190  1184		       c9 40		      cmp	#LOCKED_WALL
    191  1186		       d0 08		      bne	check_if_ladder
    192  1188		       a9 06		      lda	#LOCKED_WALL_CHAR
    193  118a		       a2 00		      ldx	#LOCKED_WALL_COLOR
    194  118c		       20 d4 11 	      jsr	draw_char_in_accumulator
    195  118f		       60		      rts
    196  1190
    197  1190				   check_if_ladder
    198  1190		       c9 50		      cmp	#LADDER
    199  1192		       d0 08		      bne	check_if_exit
    200  1194		       a9 00		      lda	#LADDER_CHAR
    201  1196		       a2 08		      ldx	#LADDER_COLOR
    202  1198		       20 d4 11 	      jsr	draw_char_in_accumulator
    203  119b		       60		      rts
    204  119c
    205  119c				   check_if_exit
    206  119c		       c9 60		      cmp	#EXIT
    207  119e		       d0 08		      bne	check_if_platform
    208  11a0		       a9 04		      lda	#EXIT_CHAR
    209  11a2		       a2 02		      ldx	#EXIT_COLOR
    210  11a4		       20 d4 11 	      jsr	draw_char_in_accumulator
    211  11a7		       60		      rts
    212  11a8
    213  11a8				   check_if_platform
    214  11a8		       c9 70		      cmp	#PLATFORM
    215  11aa		       d0 08		      bne	check_if_key
    216  11ac		       a9 02		      lda	#PLATFORM_CHAR
    217  11ae		       a2 02		      ldx	#PLATFORM_COLOR
    218  11b0		       20 d4 11 	      jsr	draw_char_in_accumulator
    219  11b3		       60		      rts
    220  11b4
    221  11b4
    222  11b4				   check_if_key
    223  11b4		       c9 80		      cmp	#KEY
    224  11b6		       d0 08		      bne	check_if_spike
    225  11b8		       a9 05		      lda	#KEY_CHAR
    226  11ba		       a2 07		      ldx	#KEY_COLOR
    227  11bc		       20 d4 11 	      jsr	draw_char_in_accumulator
    228  11bf		       60		      rts
    229  11c0
    230  11c0				   check_if_spike
    231  11c0		       c9 90		      cmp	#SPIKE
    232  11c2		       d0 08		      bne	check_if_booster
    233  11c4		       a9 08		      lda	#SPIKE_CHAR
    234  11c6		       a2 06		      ldx	#SPIKE_COLOR
    235  11c8		       20 d4 11 	      jsr	draw_char_in_accumulator
    236  11cb		       60		      rts
    237  11cc
    238  11cc				   check_if_booster
    239  11cc		       a9 09		      lda	#BOOSTER_CHAR
    240  11ce		       a2 03		      ldx	#BOOSTER_COLOR
    241  11d0		       20 d4 11 	      jsr	draw_char_in_accumulator
    242  11d3		       60		      rts
    243  11d4
    244  11d4
    245  11d4							; char in accumulator goes in screen cursor, color in x register goes in color cursor, then update cursors
    246  11d4
    247  11d4				   draw_char_in_accumulator
    248  11d4		       a0 00		      ldy	#0
    249  11d6		       91 00		      sta	(screen_cursor),y
    250  11d8
    251  11d8		       8a		      txa
    252  11d9		       91 02		      sta	(color_cursor),y
    253  11db
    254  11db		       20 72 10 	      jsr	add_one_to_screen_cursor	; add to both screen and color cursor
    255  11de		       60		      rts
------- FILE src/main.s
------- FILE updateGameState.s LEVEL 2 PASS 3
      0  11df					      include	"updateGameState.s"
      1  11df
      2  11df		       00 01	   MOVE_LEFT  =	1
      3  11df		       00 02	   MOVE_RIGHT =	2
      4  11df		       00 01	   SQUAREBOT_CHAR =	$1
      5  11df		       00 02	   SQUAREBOT_COLOR =	$2
      6  11df
      7  11df							; handle player input, update current state of game objects
      8  11df				   update_game_state
      9  11df		       a5 11		      lda	squarebot_position
     10  11e1		       85 0c		      sta	new_position
     11  11e3		       a5 12		      lda	squarebot_position+1
     12  11e5		       85 0d		      sta	new_position+1
     13  11e7		       a5 13		      lda	squarebot_color_position
     14  11e9		       85 0e		      sta	new_color_position
     15  11eb		       a5 14		      lda	squarebot_color_position+1
     16  11ed		       85 0f		      sta	new_color_position+1
     17  11ef
     18  11ef		       a5 c5		      lda	currently_pressed_key
     19  11f1		       c9 11		      cmp	#A_KEY
     20  11f3		       d0 09		      bne	check_if_d_pressed
     21  11f5		       20 42 12 	      jsr	subtract_one_from_new_position
     22  11f8		       20 09 12 	      jsr	update_squarebot_position
     23  11fb		       4c 08 12 	      jmp	handle_jump_logic
     24  11fe
     25  11fe				   check_if_d_pressed
     26  11fe		       c9 12		      cmp	#D_KEY
     27  1200		       d0 06		      bne	handle_jump_logic
     28  1202		       20 27 12 	      jsr	add_one_to_new_position
     29  1205		       20 09 12 	      jsr	update_squarebot_position
     30  1208
     31  1208				   handle_jump_logic
     32  1208		       60		      rts
     33  1209
     34  1209				   update_squarebot_position
     35  1209		       20 5d 12 	      jsr	remove_char
     36  120c							; new positions are valid; set them to current positions
     37  120c		       a5 0c		      lda	new_position
     38  120e		       85 11		      sta	squarebot_position
     39  1210		       a5 0d		      lda	new_position+1
     40  1212		       85 12		      sta	squarebot_position+1
     41  1214
     42  1214		       a5 0e		      lda	new_color_position
     43  1216		       85 13		      sta	squarebot_color_position
     44  1218		       a5 0f		      lda	new_color_position+1
     45  121a		       85 14		      sta	squarebot_color_position+1
     46  121c
     47  121c		       a0 00		      ldy	#0
     48  121e		       a9 01		      lda	#SQUAREBOT_CHAR
     49  1220		       91 11		      sta	(squarebot_position),y
     50  1222		       a9 02		      lda	#SQUAREBOT_COLOR
     51  1224		       91 13		      sta	(squarebot_color_position),y
     52  1226
     53  1226		       60		      rts
     54  1227
     55  1227
     56  1227				   add_one_to_new_position
     57  1227		       18		      clc
     58  1228		       a5 0c		      lda	new_position	; load and add to low byte
     59  122a		       69 01		      adc	#$1
     60  122c		       85 0c		      sta	new_position
     61  122e		       a5 0d		      lda	new_position+1
     62  1230		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
     63  1232		       85 0d		      sta	new_position+1
     64  1234
     65  1234		       18		      clc
     66  1235		       a5 0e		      lda	new_color_position	; load and add to low byte
     67  1237		       69 01		      adc	#$1
     68  1239		       85 0e		      sta	new_color_position
     69  123b		       a5 0f		      lda	new_color_position+1
     70  123d		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
     71  123f		       85 0f		      sta	new_color_position+1
     72  1241		       60		      rts
     73  1242
     74  1242				   subtract_one_from_new_position
     75  1242		       38		      sec
     76  1243		       a5 0c		      lda	new_position
     77  1245		       e9 01		      sbc	#$1
     78  1247		       85 0c		      sta	new_position
     79  1249		       a5 0d		      lda	new_position+1
     80  124b		       e9 00		      sbc	#$0
     81  124d		       85 0d		      sta	new_position+1
     82  124f
     83  124f		       38		      sec
     84  1250		       a5 0e		      lda	new_color_position
     85  1252		       e9 01		      sbc	#$1
     86  1254		       85 0e		      sta	new_color_position
     87  1256		       a5 0f		      lda	new_color_position+1
     88  1258		       e9 00		      sbc	#$0
     89  125a		       85 0f		      sta	new_color_position+1
     90  125c
     91  125c		       60		      rts
     92  125d
     93  125d				   remove_char		; remove squarebot from current screen location
     94  125d		       a0 00		      ldy	#0
     95  125f		       a9 20		      lda	#BLANK_CHAR
     96  1261		       91 11		      sta	(squarebot_position),Y
     97  1263		       a9 01		      lda	#1
     98  1265		       91 13		      sta	(squarebot_color_position),Y
     99  1267		       60		      rts
------- FILE src/main.s
    120  1268
    121  1268				   compressed_screen_data_start
    122  1268					      incbin	"../data/titleScreenData_compressed"	; got via 'bsave ""'
    123  12d0
    124  12d0				   level_data_start
    125  12d0					      incbin	"../data/levels/binary_levels/1"
    126  12d8					      incbin	"../data/levels/binary_levels/2"
    127  12e4					      incbin	"../data/levels/binary_levels/3"
    128  1318					      incbin	"../data/levels/binary_levels/4"
    129  1340
------- FILE memoryCheck.s LEVEL 2 PASS 3
      0  1340					      include	"memoryCheck.s"	; code to make sure the program isn't too large and enters screen memory
      1  1340		       03 3f	   BYTES_USED =	.-$1001	; location counter minus starting location = total bytes used
      2  1340		       1e 00	   SCREEN_MEMORY_START =	$1e00
 831 bytes used
      3  1340					      echo	[BYTES_USED]d, "bytes used"
 Ending program at memory location (base 10):  4928
      4  1340					      echo	"Ending program at memory location (base 10): ", [.]d
      5  1340				  -	      if	. >= SCREEN_MEMORY_START	; if program entering screen memory
      6  1340				  -	      echo	"Throwing error because program is too large, and has entered screen memory!"
      7  1340				  -	      err
      8  1340					      endif
------- FILE src/main.s
    131  1340
    132  1340
    133  1c00					      org	character_set_begin
    134  1c00		       81 ff ff 81*	      BYTE.b	129,255,255,129,129,255,255,129	; ladder 0
    135  1c08		       ff 81 a5 81*	      BYTE.b	255,129,165,129,189,165,129,255	; squarebot 1
    136  1c10		       ff ff 00 00*	      BYTE.b	255,255,0,0,0,0,0,0	; platform 2
    137  1c18		       ff ff ff ff*	      BYTE.b	255,255,255,255,255,255,255,255	; wall 3
    138  1c20		       7e e7 81 81*	      BYTE.b	126,231,129,129,225,129,129,255	; exit (door) 4
    139  1c28		       18 24 18 18*	      BYTE.b	24,36,24,24,30,24,30,24	; key powerup 5 
    140  1c30		       ff ff ef ef*	      BYTE.b	255,255,239,239,239,227,255,255	;locked wall 6
    141  1c38		       ff bd fd b7*	      BYTE.b	255,189,253,183,127,239,231,255	; breakable wall 7
    142  1c40		       00 00 18 3c*	      BYTE.b	0,0,24,60,126,126,0,0	; spike 8
    143  1c48		       00 70 48 78*	      BYTE.b	0,112,72,120,72,72,112,0	; booster powerup 9
