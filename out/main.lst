------- FILE src/main.s LEVEL 1 PASS 3
      1  1c50 ????						; title screen program -- use hand-made compression method (esentially just RLE, see rleEncoding.py)
      2  1c50 ????				      processor	6502
      3  1c50 ????
      4 U0018 ????				      seg.u	ZP
      5 U0000					      org	$0
      6 U0000
      7 U0000
      8 U0000		       00 00	   screen_cursor ds.w	1	; stores the current screen memory address
      9 U0002		       00 00	   color_cursor ds.w	1	; store current color memory address
     10 U0004		       00 00	   current_level ds.w	1
     11 U0006		       00 00	   next_level ds.w	1
     12 U0008		       00	   level_reset ds.b	1
     13 U0009		       00	   level_completed ds.b	1
     14 U000a		       00	   level_data_index ds.b	1	; for temporarily saving index registers
     15 U000b		       00	   temp       ds.b	1	; for temporarily saving index registers
     16 U000c		       00 00	   new_position ds.w	1	; use to store position of (proposed) new location for squarebot
     17 U000e		       00 00	   new_color_position ds.w	1	; use to store position of (proposed) new location for squarebot
     18 U0010		       00	   current_time ds.b	1	; store only the last byte of the jiffy clock
     19 U0011		       00 00	   squarebot_position ds.w	1
     20 U0013		       00 00	   squarebot_color_position ds.w	1
     21 U0015		       00	   has_key    ds.b	1
     22 U0016		       00	   has_booster ds.b	1
     23 U0017		       00	   jump_remaining ds.b	1	; number of times the character should continue to move upwards in the current jump
     24  1c50 ????				      seg
     25  1c50 ????
     26  1c50 ????						; constants
     27  1c50 ????	       00 20	   BLANK_CHAR =	$20
     28  1c50 ????
     29  1c50 ????	       00 00	   SCREEN_CURSOR_BEGINNING_LOW_BYTE =	$00
     30  1c50 ????	       00 1e	   SCREEN_CURSOR_BEGINNING_HIGH_BYTE =	$1e
     31  1c50 ????
     32  1c50 ????						; last screen location
     33  1c50 ????	       00 fa	   END_OF_SCREEN_LOW_BYTE =	$fa
     34  1c50 ????	       00 1f	   END_OF_SCREEN_HIGH_BYTE =	$1f
     35  1c50 ????
     36  1c50 ????						; beginning of color memory
     37  1c50 ????	       00 00	   COLOR_CURSOR_BEGINNING_LOW_BYTE =	$00
     38  1c50 ????	       00 96	   COLOR_CURSOR_BEGINNING_HIGH_BYTE =	$96
     39  1c50 ????	       00 00	   RED_COLOR_CODE =	0
     40  1c50 ????
     41  1c50 ????	       00 20	   SPACE_KEY  =	$20
     42  1c50 ????	       00 09	   W_KEY      =	$09
     43  1c50 ????	       00 11	   A_KEY      =	$11
     44  1c50 ????	       00 29	   S_KEY      =	$29
     45  1c50 ????	       00 12	   D_KEY      =	$12
     46  1c50 ????	       00 0d	   SECRET_KEY =	$0d	; press P to skip to next  level
     47  1c50 ????	       00 0a	   RESET_KEY  =	$0a	; press R to restart level i assume
     48  1c50 ????	       00 04	   JUMP_SIZE  =	$4	; number of characters a jump causes
     49  1c50 ????	       00 16	   ROW_SIZE   =	$16
     50  1c50 ????						; memory locations
     51  1c50 ????	       10 01	   user_memory_start =	$1001
     52  1c50 ????	       00 c5	   currently_pressed_key =	$c5
     53  1c50 ????	       00 a0	   jiffy_clock =	$A0
     54  1c50 ????	       90 05	   character_info_register =	$9005
     55  1c50 ????	       1c 00	   character_set_begin =	$1c00
     56  1c50 ????
     57  1c50 ????						; begin location counter at 4096 (user memory)
     58  1001					      org	user_memory_start
------- FILE stub.s LEVEL 2 PASS 3
      0  1001					      include	"stub.s"	; stub contains BASIC sys cmd to run the machine language code
      1  1001		       00 9e	   SYS_CMD_TOKEN =	$9e
      2  1001		       00 0a	   STUB_LINE_NUMBER =	10
      3  1001							; BASIC stub -- SYS cmd to run machine language
      4  1001		       0b 10		      dc.w	nextstmt	; link; beginning of basic
      5  1003		       0a 00		      dc.w	STUB_LINE_NUMBER	; line number
      6  1005		       9e 34 31 30*	      dc.b	SYS_CMD_TOKEN, [start]d, 0	; token for sys with operand as address to "start" label
      7  100b				   nextstmt
      8  100b		       00 00		      dc.w	0
------- FILE src/main.s
     60  100d
     61  100d				   start
     62  100d							; use combination of RAM (first 128 chars at 7168) & ROM character set
     63  100d		       a9 ff		      lda	#255
     64  100f		       8d 05 90 	      sta	character_info_register
     65  1012
     66  1012							; initialize some variables in the zero page
     67  1012		       a9 01		      lda	#1
     68  1014		       85 08		      sta	level_reset
     69  1016		       a9 00		      lda	#0
     70  1018		       85 09		      sta	level_completed
     71  101a
     72  101a		       a9 e0		      lda	#<level_data_start
     73  101c		       85 04		      sta	current_level
     74  101e		       a9 13		      lda	#>level_data_start
     75  1020		       85 05		      sta	current_level+1
     76  1022
     77  1022		       a9 00		      lda	#0
     78  1024		       85 17		      sta	jump_remaining
     79  1026		       85 16		      sta	has_booster
     80  1028		       85 15		      sta	has_key
     81  102a
------- FILE titleScreen.s LEVEL 2 PASS 3
      0  102a					      include	"titleScreen.s"
      1  102a				   display_title_screen
      2  102a		       a9 00		      lda	#SCREEN_CURSOR_BEGINNING_LOW_BYTE
      3  102c		       85 00		      sta	screen_cursor
      4  102e		       a9 1e		      lda	#SCREEN_CURSOR_BEGINNING_HIGH_BYTE	; store 1e in location 01
      5  1030		       85 01		      sta	screen_cursor+1
      6  1032
      7  1032		       a9 00		      lda	#COLOR_CURSOR_BEGINNING_LOW_BYTE
      8  1034		       85 02		      sta	color_cursor
      9  1036		       a9 96		      lda	#COLOR_CURSOR_BEGINNING_HIGH_BYTE
     10  1038		       85 03		      sta	color_cursor+1
     11  103a
     12  103a		       a0 00		      ldy	#$0	; to use for indirect indexed addressing
     13  103c		       a2 00		      ldx	#$0
     14  103e
     15  103e		       20 4a 10 	      jsr	draw_title_screen_loop
     16  1041
     17  1041				   infinite_loop
     18  1041		       a5 c5		      lda	currently_pressed_key
     19  1043		       c9 20		      cmp	#SPACE_KEY
     20  1045		       f0 5c		      beq	gameLoop
     21  1047		       4c 41 10 	      jmp	infinite_loop
     22  104a
     23  104a
     24  104a				   draw_title_screen_loop
     25  104a		       bd 78 13 	      lda	compressed_screen_data_start,X	; accumulator stores num times to repeat the byte
     26  104d		       20 58 10 	      jsr	draw_character	; draw the character that many times
     27  1050		       e8		      inx
     28  1051		       e8		      inx
     29  1052		       20 93 10 	      jsr	check_if_screen_cursor_at_end
     30  1055		       90 f3		      bcc	draw_title_screen_loop
     31  1057		       60		      rts
     32  1058
     33  1058
     34  1058							; draw the character in Y register for (value of accumulator) number of times
     35  1058				   draw_character
     36  1058							; if accumulator == 0, return; otherwise, subtract 1 from accumulator and continue drawing the letter at Y
     37  1058		       f0 1d		      beq	draw_character_end
     38  105a		       38		      sec
     39  105b		       e9 01		      sbc	#1
     40  105d		       48		      pha		; push accumulator onto stack
     41  105e
     42  105e							; store current char at screen cursor location
     43  105e		       a0 00		      ldy	#0
     44  1060		       bd 79 13 	      lda	compressed_screen_data_start+1,X	; load cur char to draw
     45  1063		       18		      clc
     46  1064		       69 80		      adc	#128
     47  1066		       91 00		      sta	(screen_cursor),Y	; draw it on screen
     48  1068
     49  1068							; add color to the screen location if it's not a space
     50  1068							; because our title screen only has one color, and only displays it for characters that arent space, we can get away with this "optimization",
     51  1068							; and avoid adding color data
     52  1068		       c9 20		      cmp	#BLANK_CHAR
     53  106a		       f0 04		      beq	dont_color
     54  106c		       a9 00		      lda	#RED_COLOR_CODE
     55  106e		       91 02		      sta	(color_cursor),Y
     56  1070
     57  1070				   dont_color
     58  1070		       20 78 10 	      jsr	add_one_to_screen_cursor
     59  1073		       68		      pla		; put the current 'count' (remaining times to draw character) back on accumulator
     60  1074		       4c 58 10 	      jmp	draw_character
     61  1077
     62  1077				   draw_character_end
     63  1077		       60		      rts
     64  1078
     65  1078
     66  1078
     67  1078				   add_one_to_screen_cursor
     68  1078		       18		      clc
     69  1079		       a5 00		      lda	screen_cursor	; load and add to low byte
     70  107b		       69 01		      adc	#$1
     71  107d		       85 00		      sta	screen_cursor
     72  107f		       a5 01		      lda	screen_cursor+1
     73  1081		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
     74  1083		       85 01		      sta	screen_cursor+1
     75  1085
     76  1085							; add to color cursor as well
     77  1085		       18		      clc
     78  1086		       a5 02		      lda	color_cursor	; load and add to low byte
     79  1088		       69 01		      adc	#$1
     80  108a		       85 02		      sta	color_cursor
     81  108c		       a5 03		      lda	color_cursor+1
     82  108e		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
     83  1090		       85 03		      sta	color_cursor+1
     84  1092		       60		      rts
     85  1093
     86  1093				   check_if_screen_cursor_at_end		; set carry flag if screen_cursor at position $1ff9 (8185
     87  1093		       a5 00		      lda	screen_cursor	; load value at screen_cursor low byte
     88  1095		       c9 fa		      cmp	#END_OF_SCREEN_LOW_BYTE
     89  1097		       d0 06		      bne	check_if_screen_cursor_at_end_return_false	; if low byte doesnt match, return with carry flag as neg
     90  1099
     91  1099		       a5 01		      lda	screen_cursor+1
     92  109b		       c9 1f		      cmp	#END_OF_SCREEN_HIGH_BYTE
     93  109d		       f0 02		      beq	check_if_screen_cursor_at_end_return_true	; if high byte matches, set carry flag
     94  109f
     95  109f				   check_if_screen_cursor_at_end_return_false
     96  109f		       18		      clc
     97  10a0		       60		      rts
     98  10a1
     99  10a1				   check_if_screen_cursor_at_end_return_true
    100  10a1		       38		      sec
    101  10a2		       60		      rts
------- FILE src/main.s
     83  10a3
     84  10a3
     85  10a3							; title screen code jumps here once space pressed
     86  10a3				   gameLoop
     87  10a3		       20 f3 10 	      jsr	update_level
     88  10a6		       a9 00		      lda	#0
     89  10a8		       85 08		      sta	level_reset
     90  10aa		       20 fe 11 	      jsr	update_game_state
     91  10ad		       20 d1 10 	      jsr	check_for_secret_key
     92  10b0		       20 e0 10 	      jsr	check_for_reset_key
     93  10b3		       20 c8 10 	      jsr	wait_until_next_frame
     94  10b6		       20 c8 10 	      jsr	wait_until_next_frame
     95  10b9		       20 c8 10 	      jsr	wait_until_next_frame
     96  10bc		       20 c8 10 	      jsr	wait_until_next_frame
     97  10bf		       20 c8 10 	      jsr	wait_until_next_frame
     98  10c2		       20 c8 10 	      jsr	wait_until_next_frame
     99  10c5		       4c a3 10 	      JMP	gameLoop
    100  10c8
    101  10c8
    102  10c8				   wait_until_next_frame		; wait one jiffy before completing game loop
    103  10c8		       a5 a2		      lda	jiffy_clock+2
    104  10ca		       c5 10		      cmp	current_time
    105  10cc		       f0 fa		      beq	wait_until_next_frame
    106  10ce		       85 10		      sta	current_time
    107  10d0		       60		      rts
    108  10d1
    109  10d1							; update level_completed and level_reset if secret_key pressed
    110  10d1				   check_for_secret_key
    111  10d1		       a5 c5		      lda	currently_pressed_key
    112  10d3		       c9 0d		      cmp	#SECRET_KEY
    113  10d5		       d0 08		      bne	check_for_secret_key_return
    114  10d7		       a9 01		      lda	#1
    115  10d9		       85 09		      sta	level_completed
    116  10db		       a9 01		      lda	#1
    117  10dd		       85 08		      sta	level_reset
    118  10df
    119  10df				   check_for_secret_key_return
    120  10df		       60		      rts
    121  10e0
    122  10e0
    123  10e0				   check_for_reset_key
    124  10e0		       a5 c5		      lda	currently_pressed_key
    125  10e2		       c9 0a		      cmp	#RESET_KEY
    126  10e4		       d0 f9		      bne	check_for_secret_key_return	; todo -- reset  a bunch of state (has_key, )
    127  10e6		       a9 01		      lda	#1
    128  10e8		       85 08		      sta	level_reset
    129  10ea		       a9 00		      lda	#0
    130  10ec		       85 16		      sta	has_booster
    131  10ee		       85 15		      sta	has_key
    132  10f0		       85 17		      sta	jump_remaining
    133  10f2
    134  10f2				   check_for_reset_key_return
    135  10f2		       60		      rts
    136  10f3
------- FILE updateLevel.s LEVEL 2 PASS 3
      0  10f3					      include	"updateLevel.s"
      1  10f3		       00 01	   LEVEL_IS_DONE =	1
      2  10f3		       00 00	   LEVEL_NOT_DONE =	0
      3  10f3		       00 01	   SHOULD_RESET =	1
      4  10f3		       00 00	   SHOULD_NOT_RESET =	0
      5  10f3
      6  10f3							; only first 4 bits really matter here; refer to readme for guide on lvl format
      7  10f3		       00 00	   BLANK_SPACE =	0	; 000000000
      8  10f3		       00 10	   STARTING_POINT =	16	; 00010000
      9  10f3		       00 20	   WALL       =	32	; 00100000
     10  10f3		       00 30	   BREAKABLE_WALL =	48	; 00110000
     11  10f3		       00 40	   LOCKED_WALL =	64	; 01000000
     12  10f3		       00 50	   LADDER     =	80	; 01010000
     13  10f3		       00 60	   EXIT       =	96	; 01100000
     14  10f3		       00 70	   PLATFORM   =	112	; 01110000
     15  10f3		       00 80	   KEY	      =	128	; 10000000
     16  10f3		       00 90	   SPIKE      =	144	; 10010000
     17  10f3		       00 a0	   BOOSTER    =	160	;  10100000
     18  10f3
     19  10f3		       00 00	   WALL_COLOR =	0
     20  10f3		       00 00	   BREAKABLE_WALL_COLOR =	0
     21  10f3		       00 00	   LOCKED_WALL_COLOR =	0
     22  10f3		       00 08	   LADDER_COLOR =	8
     23  10f3		       00 02	   EXIT_COLOR =	2
     24  10f3		       00 02	   PLATFORM_COLOR =	2
     25  10f3		       00 07	   KEY_COLOR  =	7
     26  10f3		       00 06	   SPIKE_COLOR =	6
     27  10f3		       00 03	   BOOSTER_COLOR =	3
     28  10f3
     29  10f3		       00 20	   BLANK_SPACE_CHAR =	$20
     30  10f3		       00 03	   WALL_CHAR  =	$3
     31  10f3		       00 07	   BREAKABLE_WALL_CHAR =	$7
     32  10f3		       00 06	   LOCKED_WALL_CHAR =	$6
     33  10f3		       00 00	   LADDER_CHAR =	$0
     34  10f3		       00 04	   EXIT_CHAR  =	$4
     35  10f3		       00 02	   PLATFORM_CHAR =	$2
     36  10f3		       00 05	   KEY_CHAR   =	$5
     37  10f3		       00 08	   SPIKE_CHAR =	$8
     38  10f3		       00 09	   BOOSTER_CHAR =	$9
     39  10f3
     40  10f3
     41  10f3				   update_level
     42  10f3							; check if the level is completed; set current_level to next_level if so
     43  10f3		       a5 09		      lda	level_completed
     44  10f5		       c9 01		      cmp	#LEVEL_IS_DONE	; (try optimizing later)
     45  10f7		       d0 0c		      bne	dont_update
     46  10f9
     47  10f9							; level is done; reset level completed
     48  10f9		       a9 00		      lda	#LEVEL_NOT_DONE
     49  10fb		       85 09		      sta	level_completed
     50  10fd
     51  10fd							; now set current_level to next_level
     52  10fd		       a5 06		      lda	next_level
     53  10ff		       85 04		      sta	current_level
     54  1101		       a5 07		      lda	next_level+1
     55  1103		       85 05		      sta	current_level+1
     56  1105
     57  1105				   dont_update
     58  1105							; now check if level reset was set
     59  1105		       a5 08		      lda	level_reset
     60  1107		       c9 00		      cmp	#0
     61  1109		       d0 01		      bne	continue_update	; if not, go back to game loop
     62  110b		       60		      rts
     63  110c
     64  110c				   continue_update
     65  110c							; if it was, update the level
     66  110c		       a9 00		      lda	#SCREEN_CURSOR_BEGINNING_LOW_BYTE
     67  110e		       85 00		      sta	screen_cursor
     68  1110		       a9 1e		      lda	#SCREEN_CURSOR_BEGINNING_HIGH_BYTE
     69  1112		       85 01		      sta	screen_cursor+1
     70  1114
     71  1114		       a9 00		      lda	#COLOR_CURSOR_BEGINNING_LOW_BYTE
     72  1116		       85 02		      sta	color_cursor
     73  1118		       a9 96		      lda	#COLOR_CURSOR_BEGINNING_HIGH_BYTE
     74  111a		       85 03		      sta	color_cursor+1
     75  111c
     76  111c		       a2 00		      ldx	#0
     77  111e		       a0 00		      ldy	#0
     78  1120		       84 0a		      sty	level_data_index
     79  1122
     80  1122							; draw (or redraw on reset) the current level
     81  1122				   draw_level_loop
     82  1122							; y stores our index in the current level data
     83  1122		       a4 0a		      ldy	level_data_index
     84  1124		       b1 04		      lda	(current_level),y	; accumulator stores the number of times to repeat the next byte
     85  1126
     86  1126		       20 42 11 	      jsr	draw_sequence
     87  1129
     88  1129		       a4 0a		      ldy	level_data_index
     89  112b		       c8		      iny		; set y to point to next length byte (iterate 2 at a time)
     90  112c		       c8		      iny
     91  112d		       84 0a		      sty	level_data_index
     92  112f
     93  112f
     94  112f		       20 93 10 	      jsr	check_if_screen_cursor_at_end
     95  1132		       90 ee		      bcc	draw_level_loop
     96  1134
     97  1134
     98  1134							; update next level pointer to point to byte after current level
     99  1134		       a5 04		      lda	current_level
    100  1136		       18		      clc
    101  1137		       65 0a		      adc	level_data_index
    102  1139		       85 06		      sta	next_level
    103  113b		       a5 05		      lda	current_level+1
    104  113d		       69 00		      adc	#0
    105  113f		       85 07		      sta	next_level+1
    106  1141		       60		      rts
    107  1142
    108  1142
    109  1142
    110  1142				   draw_sequence
    111  1142							; if acc == 0, return; otherwise subtract 1, draw the next 2 chars
    112  1142		       f0 1c		      beq	draw_sequence_end
    113  1144		       38		      sec
    114  1145		       e9 01		      sbc	#1
    115  1147		       48		      pha		; push accumulator onto stack
    116  1148
    117  1148		       a4 0a		      ldy	level_data_index
    118  114a		       c8		      iny		; (so we can access the "element" byte after the length byte)
    119  114b		       b1 04		      lda	(current_level),y	; get formatted byte (see squarebot doc)
    120  114d		       0a		      asl		; lol
    121  114e		       0a		      asl
    122  114f		       0a		      asl
    123  1150		       0a		      asl
    124  1151		       20 61 11 	      jsr	draw_high_bits	; draw char represented by the 4 high bits
    125  1154
    126  1154		       a4 0a		      ldy	level_data_index
    127  1156		       c8		      iny
    128  1157
    129  1157		       b1 04		      lda	(current_level),y
    130  1159		       20 61 11 	      jsr	draw_high_bits
    131  115c
    132  115c		       68		      pla
    133  115d		       4c 42 11 	      jmp	draw_sequence
    134  1160
    135  1160				   draw_sequence_end
    136  1160		       60		      rts
    137  1161
    138  1161
    139  1161							; put the character in the high 4 bits of accumulator on screen (see readme), and move the color and screen cursors ahead
    140  1161				   draw_high_bits
    141  1161		       29 f0		      and	#240	; shave off last 4 bits
    142  1163
    143  1163		       c9 00		      cmp	#BLANK_SPACE
    144  1165		       d0 08		      bne	check_if_starting_point
    145  1167		       a9 20		      lda	#BLANK_SPACE_CHAR	; todo; replace with actual chars
    146  1169		       a2 01		      ldx	#1
    147  116b		       20 f3 11 	      jsr	draw_char_in_accumulator
    148  116e		       60		      rts
    149  116f
    150  116f				   check_if_starting_point
    151  116f		       c9 10		      cmp	#STARTING_POINT
    152  1171		       d0 18		      bne	check_if_wall
    153  1173
    154  1173							; set squarebot to starting point
    155  1173		       a5 00		      lda	screen_cursor
    156  1175		       85 11		      sta	squarebot_position
    157  1177		       a5 01		      lda	screen_cursor+1
    158  1179		       85 12		      sta	squarebot_position+1
    159  117b
    160  117b		       a5 02		      lda	color_cursor
    161  117d		       85 13		      sta	squarebot_color_position
    162  117f		       a5 03		      lda	color_cursor+1
    163  1181		       85 14		      sta	squarebot_color_position+1
    164  1183
    165  1183		       a9 01		      lda	#$1
    166  1185		       a2 02		      ldx	#SQUAREBOT_COLOR
    167  1187		       20 f3 11 	      jsr	draw_char_in_accumulator
    168  118a
    169  118a
    170  118a
    171  118a		       60		      rts
    172  118b
    173  118b				   check_if_wall
    174  118b		       c9 20		      cmp	#WALL
    175  118d		       d0 08		      bne	check_if_breakable_wall
    176  118f		       a9 03		      lda	#WALL_CHAR
    177  1191		       a2 00		      ldx	#WALL_COLOR
    178  1193		       20 f3 11 	      jsr	draw_char_in_accumulator
    179  1196		       60		      rts
    180  1197
    181  1197				   check_if_breakable_wall
    182  1197		       c9 30		      cmp	#BREAKABLE_WALL
    183  1199		       d0 08		      bne	check_if_locked_wall
    184  119b		       a9 07		      lda	#BREAKABLE_WALL_CHAR
    185  119d		       a2 00		      ldx	#BREAKABLE_WALL_COLOR
    186  119f		       20 f3 11 	      jsr	draw_char_in_accumulator
    187  11a2		       60		      rts
    188  11a3
    189  11a3				   check_if_locked_wall
    190  11a3		       c9 40		      cmp	#LOCKED_WALL
    191  11a5		       d0 08		      bne	check_if_ladder
    192  11a7		       a9 06		      lda	#LOCKED_WALL_CHAR
    193  11a9		       a2 00		      ldx	#LOCKED_WALL_COLOR
    194  11ab		       20 f3 11 	      jsr	draw_char_in_accumulator
    195  11ae		       60		      rts
    196  11af
    197  11af				   check_if_ladder
    198  11af		       c9 50		      cmp	#LADDER
    199  11b1		       d0 08		      bne	check_if_exit
    200  11b3		       a9 00		      lda	#LADDER_CHAR
    201  11b5		       a2 08		      ldx	#LADDER_COLOR
    202  11b7		       20 f3 11 	      jsr	draw_char_in_accumulator
    203  11ba		       60		      rts
    204  11bb
    205  11bb				   check_if_exit
    206  11bb		       c9 60		      cmp	#EXIT
    207  11bd		       d0 08		      bne	check_if_platform
    208  11bf		       a9 04		      lda	#EXIT_CHAR
    209  11c1		       a2 02		      ldx	#EXIT_COLOR
    210  11c3		       20 f3 11 	      jsr	draw_char_in_accumulator
    211  11c6		       60		      rts
    212  11c7
    213  11c7				   check_if_platform
    214  11c7		       c9 70		      cmp	#PLATFORM
    215  11c9		       d0 08		      bne	check_if_key
    216  11cb		       a9 02		      lda	#PLATFORM_CHAR
    217  11cd		       a2 02		      ldx	#PLATFORM_COLOR
    218  11cf		       20 f3 11 	      jsr	draw_char_in_accumulator
    219  11d2		       60		      rts
    220  11d3
    221  11d3
    222  11d3				   check_if_key
    223  11d3		       c9 80		      cmp	#KEY
    224  11d5		       d0 08		      bne	check_if_spike
    225  11d7		       a9 05		      lda	#KEY_CHAR
    226  11d9		       a2 07		      ldx	#KEY_COLOR
    227  11db		       20 f3 11 	      jsr	draw_char_in_accumulator
    228  11de		       60		      rts
    229  11df
    230  11df				   check_if_spike
    231  11df		       c9 90		      cmp	#SPIKE
    232  11e1		       d0 08		      bne	check_if_booster
    233  11e3		       a9 08		      lda	#SPIKE_CHAR
    234  11e5		       a2 06		      ldx	#SPIKE_COLOR
    235  11e7		       20 f3 11 	      jsr	draw_char_in_accumulator
    236  11ea		       60		      rts
    237  11eb
    238  11eb				   check_if_booster
    239  11eb		       a9 09		      lda	#BOOSTER_CHAR
    240  11ed		       a2 03		      ldx	#BOOSTER_COLOR
    241  11ef		       20 f3 11 	      jsr	draw_char_in_accumulator
    242  11f2		       60		      rts
    243  11f3
    244  11f3
    245  11f3							; char in accumulator goes in screen cursor, color in x register goes in color cursor, then update cursors
    246  11f3
    247  11f3				   draw_char_in_accumulator
    248  11f3		       a0 00		      ldy	#0
    249  11f5		       91 00		      sta	(screen_cursor),y
    250  11f7
    251  11f7		       8a		      txa
    252  11f8		       91 02		      sta	(color_cursor),y
    253  11fa
    254  11fa		       20 78 10 	      jsr	add_one_to_screen_cursor	; add to both screen and color cursor
    255  11fd		       60		      rts
------- FILE src/main.s
------- FILE updateGameState.s LEVEL 2 PASS 3
      0  11fe					      include	"updateGameState.s"
      1  11fe
      2  11fe		       00 01	   MOVE_LEFT  =	1
      3  11fe		       00 02	   MOVE_RIGHT =	2
      4  11fe		       00 01	   SQUAREBOT_CHAR =	$1
      5  11fe		       00 02	   SQUAREBOT_COLOR =	$2
      6  11fe		       00 e4	   START_OF_FIRST_ROW_LOW_BYTE =	$e4
      7  11fe		       00 1f	   START_OF_FIRST_ROW_HIGH_BYTE =	$1f
      8  11fe
      9  11fe				   update_game_state
     10  11fe		       a5 11		      lda	squarebot_position
     11  1200		       85 0c		      sta	new_position
     12  1202		       a5 12		      lda	squarebot_position+1
     13  1204		       85 0d		      sta	new_position+1
     14  1206		       a5 13		      lda	squarebot_color_position
     15  1208		       85 0e		      sta	new_color_position
     16  120a		       a5 14		      lda	squarebot_color_position+1
     17  120c		       85 0f		      sta	new_color_position+1
     18  120e
     19  120e		       a5 c5		      lda	currently_pressed_key
     20  1210		       c9 11		      cmp	#A_KEY
     21  1212		       d0 06		      bne	check_if_d_pressed
     22  1214		       20 e1 12 	      jsr	move_new_position_to_left
     23  1217		       4c 21 12 	      jmp	check_if_new_position_valid
     24  121a
     25  121a				   check_if_d_pressed
     26  121a		       c9 12		      cmp	#D_KEY
     27  121c		       d0 03		      bne	check_if_new_position_valid
     28  121e		       20 c6 12 	      jsr	move_new_position_to_right
     29  1221
     30  1221				   check_if_new_position_valid
     31  1221		       a0 00		      ldy	#0
     32  1223		       b1 0c		      lda	(new_position),y
     33  1225		       c9 04		      cmp	#EXIT_CHAR
     34  1227		       d0 04		      bne	continue_level
     35  1229		       20 bf 12 	      jsr	level_has_finished
     36  122c		       60		      rts
     37  122d
     38  122d				   continue_level
     39  122d		       20 3d 13 	      jsr	collision_handler
     40  1230		       90 03		      bcc	handle_jump_logic
     41  1232
     42  1232		       20 a1 12 	      jsr	update_squarebot_position
     43  1235
     44  1235				   handle_jump_logic
     45  1235		       a5 17		      lda	jump_remaining	; how many more upward motions for current jump
     46  1237		       c9 00		      cmp	#0
     47  1239		       d0 2d		      bne	handle_jumps_remaining
     48  123b
     49  123b
     50  123b				   handle_no_jumps_remaining		; if no jumps left, then start jump if space is pressed, otherwise just skip and handle gravity
     51  123b		       a5 c5		      lda	currently_pressed_key
     52  123d		       c9 20		      cmp	#SPACE_KEY
     53  123f		       d0 47		      bne	handle_gravity
     54  1241
     55  1241
     56  1241
     57  1241		       20 68 13 	      jsr	squarebot_on_first_row	; if on first row, we dont care about what character lies below
     58  1244		       b0 0d		      bcs	skip_validity_check
     59  1246
     60  1246							; check if character below is blank; if so dont allow us to set jump_remaining
     61  1246		       a0 16		      ldy	#ROW_SIZE
     62  1248		       b1 11		      lda	(squarebot_position),y
     63  124a
     64  124a		       c9 04		      cmp	#EXIT_CHAR
     65  124c		       f0 71		      beq	level_has_finished
     66  124e
     67  124e		       20 3d 13 	      jsr	collision_handler
     68  1251		       b0 35		      bcs	handle_gravity
     69  1253
     70  1253				   skip_validity_check
     71  1253		       a5 16		      lda	has_booster	; if we have the booster, set jump_remaining to twice as high, then get rid of the booster
     72  1255		       c9 01		      cmp	#1
     73  1257		       d0 0b		      bne	regular_jump
     74  1259		       a9 08		      lda	#JUMP_SIZE*2
     75  125b		       85 17		      sta	jump_remaining
     76  125d		       a9 00		      lda	#0
     77  125f		       85 16		      sta	has_booster
     78  1261		       4c 68 12 	      jmp	handle_jumps_remaining
     79  1264
     80  1264
     81  1264				   regular_jump
     82  1264		       a9 04		      lda	#JUMP_SIZE
     83  1266		       85 17		      sta	jump_remaining
     84  1268
     85  1268				   handle_jumps_remaining
     86  1268		       20 fc 12 	      jsr	move_new_position_up
     87  126b		       a0 00		      ldy	#0
     88  126d		       b1 0c		      lda	(new_position),y
     89  126f		       c9 04		      cmp	#EXIT_CHAR
     90  1271		       f0 4c		      beq	level_has_finished
     91  1273
     92  1273		       20 3d 13 	      jsr	collision_handler
     93  1276		       90 0b		      bcc	jump_is_invalid
     94  1278
     95  1278		       20 a1 12 	      jsr	update_squarebot_position
     96  127b
     97  127b		       a5 17		      lda	jump_remaining
     98  127d		       38		      sec
     99  127e		       e9 01		      sbc	#1
    100  1280		       85 17		      sta	jump_remaining
    101  1282		       60		      rts		; no gravity effect after moving upwards from jump
    102  1283
    103  1283
    104  1283				   jump_is_invalid
    105  1283		       a9 00		      lda	#0
    106  1285		       85 17		      sta	jump_remaining
    107  1287		       60		      rts
    108  1288
    109  1288				   handle_gravity		; on first row - do nothing
    110  1288		       20 17 13 	      jsr	move_new_position_down
    111  128b
    112  128b		       20 68 13 	      jsr	squarebot_on_first_row
    113  128e		       b0 10		      bcs	do_nothing
    114  1290
    115  1290		       a0 00		      ldy	#0
    116  1292		       b1 0c		      lda	(new_position),y
    117  1294
    118  1294		       c9 04		      cmp	#EXIT_CHAR
    119  1296		       f0 27		      beq	level_has_finished
    120  1298
    121  1298		       20 3d 13 	      jsr	collision_handler
    122  129b		       90 03		      bcc	do_nothing
    123  129d
    124  129d
    125  129d		       20 a1 12 	      jsr	update_squarebot_position
    126  12a0
    127  12a0				   do_nothing
    128  12a0		       60		      rts
    129  12a1
    130  12a1				   update_squarebot_position
    131  12a1		       20 32 13 	      jsr	remove_char
    132  12a4							; new positions are valid; set them to current positions
    133  12a4
    134  12a4		       a5 0c		      lda	new_position
    135  12a6		       85 11		      sta	squarebot_position
    136  12a8		       a5 0d		      lda	new_position+1
    137  12aa		       85 12		      sta	squarebot_position+1
    138  12ac
    139  12ac		       a5 0e		      lda	new_color_position
    140  12ae		       85 13		      sta	squarebot_color_position
    141  12b0		       a5 0f		      lda	new_color_position+1
    142  12b2		       85 14		      sta	squarebot_color_position+1
    143  12b4
    144  12b4		       a0 00		      ldy	#0
    145  12b6		       a9 01		      lda	#SQUAREBOT_CHAR
    146  12b8		       91 11		      sta	(squarebot_position),y
    147  12ba		       a9 02		      lda	#SQUAREBOT_COLOR
    148  12bc		       91 13		      sta	(squarebot_color_position),y
    149  12be
    150  12be		       60		      rts
    151  12bf
    152  12bf				   level_has_finished
    153  12bf		       a9 01		      lda	#1
    154  12c1		       85 09		      sta	level_completed
    155  12c3		       85 08		      sta	level_reset
    156  12c5		       60		      rts
    157  12c6
    158  12c6				   move_new_position_to_right
    159  12c6		       18		      clc
    160  12c7		       a5 0c		      lda	new_position	; load and add to low byte
    161  12c9		       69 01		      adc	#$1
    162  12cb		       85 0c		      sta	new_position
    163  12cd		       a5 0d		      lda	new_position+1
    164  12cf		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
    165  12d1		       85 0d		      sta	new_position+1
    166  12d3		       18		      clc
    167  12d4		       a5 0e		      lda	new_color_position	; load and add to low byte
    168  12d6		       69 01		      adc	#$1
    169  12d8		       85 0e		      sta	new_color_position
    170  12da		       a5 0f		      lda	new_color_position+1
    171  12dc		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
    172  12de		       85 0f		      sta	new_color_position+1
    173  12e0		       60		      rts
    174  12e1
    175  12e1				   move_new_position_to_left
    176  12e1		       38		      sec
    177  12e2		       a5 0c		      lda	new_position
    178  12e4		       e9 01		      sbc	#$1
    179  12e6		       85 0c		      sta	new_position
    180  12e8		       a5 0d		      lda	new_position+1
    181  12ea		       e9 00		      sbc	#$0
    182  12ec		       85 0d		      sta	new_position+1
    183  12ee		       38		      sec
    184  12ef		       a5 0e		      lda	new_color_position
    185  12f1		       e9 01		      sbc	#$1
    186  12f3		       85 0e		      sta	new_color_position
    187  12f5		       a5 0f		      lda	new_color_position+1
    188  12f7		       e9 00		      sbc	#$0
    189  12f9		       85 0f		      sta	new_color_position+1
    190  12fb		       60		      rts
    191  12fc
    192  12fc
    193  12fc				   move_new_position_up
    194  12fc		       38		      sec
    195  12fd		       a5 0c		      lda	new_position
    196  12ff		       e9 16		      sbc	#ROW_SIZE
    197  1301		       85 0c		      sta	new_position
    198  1303		       a5 0d		      lda	new_position+1
    199  1305		       e9 00		      sbc	#$0
    200  1307		       85 0d		      sta	new_position+1
    201  1309		       38		      sec
    202  130a		       a5 0e		      lda	new_color_position
    203  130c		       e9 16		      sbc	#ROW_SIZE
    204  130e		       85 0e		      sta	new_color_position
    205  1310		       a5 0f		      lda	new_color_position+1
    206  1312		       e9 00		      sbc	#$0
    207  1314		       85 0f		      sta	new_color_position+1
    208  1316		       60		      rts
    209  1317
    210  1317				   move_new_position_down
    211  1317		       18		      clc
    212  1318		       a5 0c		      lda	new_position	; load and add to low byte
    213  131a		       69 16		      adc	#ROW_SIZE
    214  131c		       85 0c		      sta	new_position
    215  131e		       a5 0d		      lda	new_position+1
    216  1320		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
    217  1322		       85 0d		      sta	new_position+1
    218  1324		       18		      clc
    219  1325		       a5 0e		      lda	new_color_position	; load and add to low byte
    220  1327		       69 16		      adc	#ROW_SIZE
    221  1329		       85 0e		      sta	new_color_position
    222  132b		       a5 0f		      lda	new_color_position+1
    223  132d		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
    224  132f		       85 0f		      sta	new_color_position+1
    225  1331		       60		      rts
    226  1332
    227  1332
    228  1332				   remove_char		; remove squarebot from current screen location
    229  1332		       a0 00		      ldy	#0
    230  1334		       a9 20		      lda	#BLANK_CHAR
    231  1336		       91 11		      sta	(squarebot_position),Y
    232  1338		       a9 01		      lda	#1
    233  133a		       91 13		      sta	(squarebot_color_position),Y
    234  133c		       60		      rts
    235  133d
    236  133d				   collision_handler		; accumulator is the character (the actual character code) in the position that squarebot wants to move to
    237  133d							; set carry flag if we can move to this char, otherwise clear it
    238  133d		       c9 20		      cmp	#BLANK_CHAR
    239  133f		       f0 33		      beq	return_true
    240  1341
    241  1341		       c9 09		      CMP	#BOOSTER_CHAR
    242  1343		       d0 07		      bne	key_check
    243  1345		       a9 01		      lda	#1
    244  1347		       85 16		      sta	has_booster
    245  1349		       4c 74 13 	      jmp	return_true
    246  134c
    247  134c				   key_check
    248  134c		       c9 05		      cmp	#KEY_CHAR
    249  134e		       d0 07		      bne	locked_wall_check
    250  1350		       a9 01		      lda	#1
    251  1352		       85 15		      sta	has_key
    252  1354		       4c 74 13 	      jmp	return_true
    253  1357
    254  1357				   locked_wall_check
    255  1357		       c9 06		      cmp	#LOCKED_WALL_CHAR
    256  1359		       d0 1b		      bne	return_false
    257  135b
    258  135b		       a5 15		      lda	has_key	; if locked wall, but player doesnt have key, cant do anything
    259  135d		       c9 00		      cmp	#0
    260  135f		       f0 15		      beq	return_false
    261  1361
    262  1361		       a9 00		      lda	#0	; but if locked wall and has key, get rid of the locked wall and the key
    263  1363		       85 15		      sta	has_key
    264  1365		       4c 74 13 	      jmp	return_true
    265  1368
    266  1368
    267  1368				   squarebot_on_first_row		; set carry flag to 0 if squarebot_position is on bottom of screen; otherwise set to 1
    268  1368		       a5 12		      lda	squarebot_position+1
    269  136a		       c9 1f		      cmp	#START_OF_FIRST_ROW_HIGH_BYTE
    270  136c		       90 08		      bcc	return_false	; compare high bits; return false if current position high bit is smaller than high bit of leftmost position on first row
    271  136e		       a5 11		      lda	squarebot_position
    272  1370		       c9 e4		      cmp	#START_OF_FIRST_ROW_LOW_BYTE
    273  1372		       90 02		      bcc	return_false
    274  1374
    275  1374				   return_true
    276  1374		       38		      sec
    277  1375		       60		      rts
    278  1376
    279  1376				   return_false
    280  1376		       18		      clc
    281  1377		       60		      rts
    282  1378
    283  1378
    284  1378							;plan for powerups + ladders etc
    285  1378							;5 variables to store the 5 tiles the player is on: tileU, tileD, tileR, tileL, tileM
    286  1378							;maybe combine to save space?
    287  1378							;4 characters to store each powerup spot: charU, charD, charR, charL
    288  1378
    289  1378							;when moving the character right: ASSUMING THIS DOESN'T FLICKER
    290  1378							;  delete L, U and D and draw original tiles there
    291  1378							;  tileU = new, tileD = new, tileL = tileM, tileM = tileR, tileR = new
    292  1378							;  update chars
    293  1378							;  draw chars in the new place
    294  1378							;same deal for moving in any direction
    295  1378
    296  1378
    297  1378							;for moving while jumping, something about register 028C which counts down until a refresh on the button or something
------- FILE src/main.s
    139  1378
    140  1378				   compressed_screen_data_start
    141  1378					      incbin	"../data/titleScreenData_compressed"	; got via 'bsave ""'
    142  13e0
    143  13e0				   level_data_start
    144  13e0					      incbin	"../data/levels/binary_levels/1"
    145  13e8					      incbin	"../data/levels/binary_levels/booster_test"
    146  13f6					      incbin	"../data/levels/binary_levels/key_test"
    147  140c					      incbin	"../data/levels/binary_levels/2"
    148  1424					      incbin	"../data/levels/binary_levels/3"
    149  147c					      incbin	"../data/levels/binary_levels/4"
    150  14a8					      incbin	"../data/levels/binary_levels/5"
    151  14d4					      incbin	"../data/levels/binary_levels/6"
    152  1506
------- FILE memoryCheck.s LEVEL 2 PASS 3
      0  1506					      include	"memoryCheck.s"	; code to make sure the program isn't too large and enters screen memory
      1  1506		       05 05	   BYTES_USED =	.-$1001	; location counter minus starting location = total bytes used
      2  1506		       1e 00	   SCREEN_MEMORY_START =	$1e00
 1285 bytes used
      3  1506					      echo	[BYTES_USED]d, "bytes used"
 Ending program at memory location (base 10):  5382
      4  1506					      echo	"Ending program at memory location (base 10): ", [.]d
      5  1506				  -	      if	. >= SCREEN_MEMORY_START	; if program entering screen memory
      6  1506				  -	      echo	"Throwing error because program is too large, and has entered screen memory!"
      7  1506				  -	      err
      8  1506					      endif
------- FILE src/main.s
    154  1506
    155  1506
    156  1c00					      org	character_set_begin
    157  1c00		       7e 42 7e 42*	      BYTE.b	$7E, $42, $7E, $42, $7E, $42, $7E, $42	; ladder 0
    158  1c08		       ff 81 a5 81*	      BYTE.b	$FF, $81, $A5, $81, $BD, $81, $81, $FF	; squarebot 1
    159  1c10		       ff 5a 00 00*	      BYTE.b	$FF, $5A, $00, $00, $00, $00, $00, $00	; platform 2
    160  1c18		       ff ff ff ff*	      BYTE.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF	; wall 3
    161  1c20		       ff 9d a3 ac*	      BYTE.b	$FF, $9D, $A3, $AC, $A5, $99, $C3, $FF	; exit (door) 4
    162  1c28		       3c 42 99 99*	      BYTE.b	$3C, $42, $99, $99, $91, $99, $42, $3C	; key powerup 5
    163  1c30		       ff e7 c3 e7*	      BYTE.b	$FF, $E7, $C3, $E7, $E7, $C3, $81, $FF	; locked wall 6
    164  1c38		       ff ee f1 ef*	      BYTE.b	$FF, $EE, $F1, $EF, $57, $8F, $F3, $FF	; breakable wall 7
    165  1c40		       3c 42 91 99*	      BYTE.b	$3C, $42, $91, $99, $BD, $81, $42, $3C	; spike 8
    166  1c48		       3c 42 99 bd*	      BYTE.b	$3C, $42, $99, $BD, $89, $91, $42, $3C	; booster powerup 9
