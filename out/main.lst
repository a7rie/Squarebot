------- FILE src/main.s LEVEL 1 PASS 3
      1  1c50 ????						; title screen program -- use hand-made compression method (esentially just RLE, see rleEncoding.py)
      2  1c50 ????				      processor	6502
      3  1c50 ????
      4 U0018 ????				      seg.u	ZP
      5 U0000					      org	$0
      6 U0000
      7 U0000
      8 U0000		       00 00	   screen_cursor ds.w	1	; stores the current screen memory address
      9 U0002		       00 00	   color_cursor ds.w	1	; store current color memory address
     10 U0004		       00 00	   current_level ds.w	1
     11 U0006		       00 00	   next_level ds.w	1
     12 U0008		       00	   level_reset ds.b	1
     13 U0009		       00	   level_completed ds.b	1
     14 U000a		       00	   level_data_index ds.b	1	; for temporarily saving index registers
     15 U000b		       00	   temp       ds.b	1	; for temporarily saving index registers
     16 U000c		       00 00	   new_position ds.w	1	; use to store position of (proposed) new location for squarebot
     17 U000e		       00 00	   new_color_position ds.w	1	; use to store position of (proposed) new location for squarebot
     18 U0010		       00	   current_time ds.b	1	; store only the last byte of the jiffy clock
     19 U0011		       00 00	   squarebot_position ds.w	1
     20 U0013		       00 00	   squarebot_color_position ds.w	1
     21 U0015		       00	   has_key    ds.b	1
     22 U0016		       00	   has_booster ds.b	1
     23 U0017		       00	   jump_remaining ds.b	1	; number of times the character should continue to move upwards in the current jump
     24  1c50 ????				      seg
     25  1c50 ????
     26  1c50 ????						; constants
     27  1c50 ????	       00 20	   BLANK_CHAR =	$20
     28  1c50 ????
     29  1c50 ????	       00 00	   SCREEN_CURSOR_BEGINNING_LOW_BYTE =	$00
     30  1c50 ????	       00 1e	   SCREEN_CURSOR_BEGINNING_HIGH_BYTE =	$1e
     31  1c50 ????
     32  1c50 ????						; last screen location
     33  1c50 ????	       00 fa	   END_OF_SCREEN_LOW_BYTE =	$fa
     34  1c50 ????	       00 1f	   END_OF_SCREEN_HIGH_BYTE =	$1f
     35  1c50 ????
     36  1c50 ????						; beginning of color memory
     37  1c50 ????	       00 00	   COLOR_CURSOR_BEGINNING_LOW_BYTE =	$00
     38  1c50 ????	       00 96	   COLOR_CURSOR_BEGINNING_HIGH_BYTE =	$96
     39  1c50 ????	       00 00	   RED_COLOR_CODE =	0
     40  1c50 ????
     41  1c50 ????	       00 20	   SPACE_KEY  =	$20
     42  1c50 ????	       00 09	   W_KEY      =	$09
     43  1c50 ????	       00 11	   A_KEY      =	$11
     44  1c50 ????	       00 29	   S_KEY      =	$29
     45  1c50 ????	       00 12	   D_KEY      =	$12
     46  1c50 ????	       00 0d	   SECRET_KEY =	$0d	; press P to skip to next  level
     47  1c50 ????	       00 34	   RESET_KEY  =	$34
     48  1c50 ????	       00 04	   JUMP_SIZE  =	$4	; number of characters a jump causes
     49  1c50 ????	       00 16	   ROW_SIZE   =	$16
     50  1c50 ????						; memory locations
     51  1c50 ????	       10 01	   user_memory_start =	$1001
     52  1c50 ????	       00 c5	   currently_pressed_key =	$c5
     53  1c50 ????	       00 a0	   jiffy_clock =	$A0
     54  1c50 ????	       90 05	   character_info_register =	$9005
     55  1c50 ????	       1c 00	   character_set_begin =	$1c00
     56  1c50 ????
     57  1c50 ????						; begin location counter at 4096 (user memory)
     58  1001					      org	user_memory_start
------- FILE stub.s LEVEL 2 PASS 3
      0  1001					      include	"stub.s"	; stub contains BASIC sys cmd to run the machine language code
      1  1001		       00 9e	   SYS_CMD_TOKEN =	$9e
      2  1001		       00 0a	   STUB_LINE_NUMBER =	10
      3  1001							; BASIC stub -- SYS cmd to run machine language 
      4  1001		       0b 10		      dc.w	nextstmt	; link; beginning of basic
      5  1003		       0a 00		      dc.w	STUB_LINE_NUMBER	; line number 
      6  1005		       9e 34 31 30*	      dc.b	SYS_CMD_TOKEN, [start]d, 0	; token for sys with operand as address to "start" label
      7  100b				   nextstmt
      8  100b		       00 00		      dc.w	0
------- FILE src/main.s
     60  100d
     61  100d				   start
     62  100d							; use combination of RAM (first 128 chars at 7168) & ROM character set
     63  100d		       a9 ff		      lda	#255
     64  100f		       8d 05 90 	      sta	character_info_register
     65  1012
     66  1012							; initialize some variables in the zero page
     67  1012		       a9 01		      lda	#1
     68  1014		       85 08		      sta	level_reset
     69  1016		       a9 00		      lda	#0
     70  1018		       85 09		      sta	level_completed
     71  101a
     72  101a		       a9 90		      lda	#<level_data_start
     73  101c		       85 04		      sta	current_level
     74  101e		       a9 13		      lda	#>level_data_start
     75  1020		       85 05		      sta	current_level+1
     76  1022
     77  1022		       a9 00		      lda	#0
     78  1024		       85 17		      sta	jump_remaining
     79  1026
------- FILE titleScreen.s LEVEL 2 PASS 3
      0  1026					      include	"titleScreen.s"
      1  1026				   display_title_screen
      2  1026		       a9 00		      lda	#SCREEN_CURSOR_BEGINNING_LOW_BYTE
      3  1028		       85 00		      sta	screen_cursor
      4  102a		       a9 1e		      lda	#SCREEN_CURSOR_BEGINNING_HIGH_BYTE	; store 1e in location 01
      5  102c		       85 01		      sta	screen_cursor+1
      6  102e
      7  102e		       a9 00		      lda	#COLOR_CURSOR_BEGINNING_LOW_BYTE
      8  1030		       85 02		      sta	color_cursor
      9  1032		       a9 96		      lda	#COLOR_CURSOR_BEGINNING_HIGH_BYTE
     10  1034		       85 03		      sta	color_cursor+1
     11  1036
     12  1036		       a0 00		      ldy	#$0	; to use for indirect indexed addressing
     13  1038		       a2 00		      ldx	#$0
     14  103a
     15  103a		       20 46 10 	      jsr	draw_title_screen_loop
     16  103d
     17  103d				   infinite_loop
     18  103d		       a5 c5		      lda	currently_pressed_key
     19  103f		       c9 20		      cmp	#SPACE_KEY
     20  1041		       f0 5c		      beq	gameLoop
     21  1043		       4c 3d 10 	      jmp	infinite_loop
     22  1046
     23  1046
     24  1046				   draw_title_screen_loop
     25  1046		       bd 28 13 	      lda	compressed_screen_data_start,X	; accumulator stores num times to repeat the byte
     26  1049		       20 54 10 	      jsr	draw_character	; draw the character that many times
     27  104c		       e8		      inx
     28  104d		       e8		      inx
     29  104e		       20 8f 10 	      jsr	check_if_screen_cursor_at_end
     30  1051		       90 f3		      bcc	draw_title_screen_loop
     31  1053		       60		      rts
     32  1054
     33  1054
     34  1054							; draw the character in Y register for (value of accumulator) number of times
     35  1054				   draw_character
     36  1054							; if accumulator == 0, return; otherwise, subtract 1 from accumulator and continue drawing the letter at Y
     37  1054		       f0 1d		      beq	draw_character_end
     38  1056		       38		      sec
     39  1057		       e9 01		      sbc	#1
     40  1059		       48		      pha		; push accumulator onto stack
     41  105a
     42  105a							; store current char at screen cursor location
     43  105a		       a0 00		      ldy	#0
     44  105c		       bd 29 13 	      lda	compressed_screen_data_start+1,X	; load cur char to draw
     45  105f		       18		      clc
     46  1060		       69 80		      adc	#128
     47  1062		       91 00		      sta	(screen_cursor),Y	; draw it on screen
     48  1064
     49  1064							; add color to the screen location if it's not a space
     50  1064							; because our title screen only has one color, and only displays it for characters that arent space, we can get away with this "optimization",
     51  1064							; and avoid adding color data
     52  1064		       c9 20		      cmp	#BLANK_CHAR
     53  1066		       f0 04		      beq	dont_color
     54  1068		       a9 00		      lda	#RED_COLOR_CODE
     55  106a		       91 02		      sta	(color_cursor),Y
     56  106c
     57  106c				   dont_color
     58  106c		       20 74 10 	      jsr	add_one_to_screen_cursor
     59  106f		       68		      pla		; put the current 'count' (remaining times to draw character) back on accumulator
     60  1070		       4c 54 10 	      jmp	draw_character
     61  1073
     62  1073				   draw_character_end
     63  1073		       60		      rts
     64  1074
     65  1074
     66  1074
     67  1074				   add_one_to_screen_cursor
     68  1074		       18		      clc
     69  1075		       a5 00		      lda	screen_cursor	; load and add to low byte
     70  1077		       69 01		      adc	#$1
     71  1079		       85 00		      sta	screen_cursor
     72  107b		       a5 01		      lda	screen_cursor+1
     73  107d		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
     74  107f		       85 01		      sta	screen_cursor+1
     75  1081
     76  1081							; add to color cursor as well
     77  1081		       18		      clc
     78  1082		       a5 02		      lda	color_cursor	; load and add to low byte
     79  1084		       69 01		      adc	#$1
     80  1086		       85 02		      sta	color_cursor
     81  1088		       a5 03		      lda	color_cursor+1
     82  108a		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
     83  108c		       85 03		      sta	color_cursor+1
     84  108e		       60		      rts
     85  108f
     86  108f				   check_if_screen_cursor_at_end		; set carry flag if screen_cursor at position $1ff9 (8185
     87  108f		       a5 00		      lda	screen_cursor	; load value at screen_cursor low byte
     88  1091		       c9 fa		      cmp	#END_OF_SCREEN_LOW_BYTE
     89  1093		       d0 06		      bne	check_if_screen_cursor_at_end_return_false	; if low byte doesnt match, return with carry flag as neg
     90  1095
     91  1095		       a5 01		      lda	screen_cursor+1
     92  1097		       c9 1f		      cmp	#END_OF_SCREEN_HIGH_BYTE
     93  1099		       f0 02		      beq	check_if_screen_cursor_at_end_return_true	; if high byte matches, set carry flag
     94  109b
     95  109b				   check_if_screen_cursor_at_end_return_false
     96  109b		       18		      clc
     97  109c		       60		      rts
     98  109d
     99  109d				   check_if_screen_cursor_at_end_return_true
    100  109d		       38		      sec
    101  109e		       60		      rts
------- FILE src/main.s
     81  109f
     82  109f
     83  109f							; title screen code jumps here once space pressed
     84  109f				   gameLoop
     85  109f		       20 e7 10 	      jsr	update_level
     86  10a2		       a9 00		      lda	#0
     87  10a4		       85 08		      sta	level_reset
     88  10a6		       20 f2 11 	      jsr	update_game_state
     89  10a9		       20 cd 10 	      jsr	check_for_secret_key
     90  10ac		       20 dc 10 	      jsr	check_for_reset_key
     91  10af		       20 c4 10 	      jsr	wait_until_next_frame
     92  10b2		       20 c4 10 	      jsr	wait_until_next_frame
     93  10b5		       20 c4 10 	      jsr	wait_until_next_frame
     94  10b8		       20 c4 10 	      jsr	wait_until_next_frame
     95  10bb		       20 c4 10 	      jsr	wait_until_next_frame
     96  10be		       20 c4 10 	      jsr	wait_until_next_frame
     97  10c1		       4c 9f 10 	      JMP	gameLoop
     98  10c4
     99  10c4
    100  10c4				   wait_until_next_frame		; wait one jiffy before completing game loop
    101  10c4		       a5 a2		      lda	jiffy_clock+2
    102  10c6		       c5 10		      cmp	current_time
    103  10c8		       f0 fa		      beq	wait_until_next_frame
    104  10ca		       85 10		      sta	current_time
    105  10cc		       60		      rts
    106  10cd
    107  10cd							; update level_completed and level_reset if secret_key pressed
    108  10cd				   check_for_secret_key
    109  10cd		       a5 c5		      lda	currently_pressed_key
    110  10cf		       c9 0d		      cmp	#SECRET_KEY
    111  10d1		       d0 08		      bne	check_for_secret_key_return
    112  10d3		       a9 01		      lda	#1
    113  10d5		       85 09		      sta	level_completed
    114  10d7		       a9 01		      lda	#1
    115  10d9		       85 08		      sta	level_reset
    116  10db
    117  10db				   check_for_secret_key_return
    118  10db		       60		      rts
    119  10dc
    120  10dc
    121  10dc				   check_for_reset_key
    122  10dc		       a5 c5		      lda	currently_pressed_key
    123  10de		       c9 34		      cmp	#RESET_KEY
    124  10e0		       d0 f9		      bne	check_for_secret_key_return	; todo -- reset  a bunch of state (has_key, )
    125  10e2		       a9 01		      lda	#1
    126  10e4		       85 08		      sta	level_reset
    127  10e6				   check_for_reset_key_return
    128  10e6		       60		      rts
    129  10e7
------- FILE updateLevel.s LEVEL 2 PASS 3
      0  10e7					      include	"updateLevel.s"
      1  10e7		       00 01	   LEVEL_IS_DONE =	1
      2  10e7		       00 00	   LEVEL_NOT_DONE =	0
      3  10e7		       00 01	   SHOULD_RESET =	1
      4  10e7		       00 00	   SHOULD_NOT_RESET =	0
      5  10e7
      6  10e7							; only first 4 bits really matter here; refer to readme for guide on lvl format
      7  10e7		       00 00	   BLANK_SPACE =	0	; 000000000
      8  10e7		       00 10	   STARTING_POINT =	16	; 00010000
      9  10e7		       00 20	   WALL       =	32	; 00100000
     10  10e7		       00 30	   BREAKABLE_WALL =	48	; 00110000
     11  10e7		       00 40	   LOCKED_WALL =	64	; 01000000
     12  10e7		       00 50	   LADDER     =	80	; 01010000
     13  10e7		       00 60	   EXIT       =	96	; 01100000
     14  10e7		       00 70	   PLATFORM   =	112	; 01110000
     15  10e7		       00 80	   KEY	      =	128	; 10000000
     16  10e7		       00 90	   SPIKE      =	144	; 10010000
     17  10e7		       00 a0	   BOOSTER    =	160	;  10100000
     18  10e7
     19  10e7		       00 00	   WALL_COLOR =	0
     20  10e7		       00 00	   BREAKABLE_WALL_COLOR =	0
     21  10e7		       00 00	   LOCKED_WALL_COLOR =	0
     22  10e7		       00 08	   LADDER_COLOR =	8
     23  10e7		       00 02	   EXIT_COLOR =	2
     24  10e7		       00 02	   PLATFORM_COLOR =	2
     25  10e7		       00 07	   KEY_COLOR  =	7
     26  10e7		       00 06	   SPIKE_COLOR =	6
     27  10e7		       00 03	   BOOSTER_COLOR =	3
     28  10e7
     29  10e7		       00 20	   BLANK_SPACE_CHAR =	$20
     30  10e7		       00 03	   WALL_CHAR  =	$3
     31  10e7		       00 07	   BREAKABLE_WALL_CHAR =	$7
     32  10e7		       00 06	   LOCKED_WALL_CHAR =	$6
     33  10e7		       00 00	   LADDER_CHAR =	$0
     34  10e7		       00 04	   EXIT_CHAR  =	$4
     35  10e7		       00 02	   PLATFORM_CHAR =	$2
     36  10e7		       00 05	   KEY_CHAR   =	$5
     37  10e7		       00 08	   SPIKE_CHAR =	$8
     38  10e7		       00 09	   BOOSTER_CHAR =	$9
     39  10e7
     40  10e7
     41  10e7				   update_level
     42  10e7							; check if the level is completed; set current_level to next_level if so
     43  10e7		       a5 09		      lda	level_completed
     44  10e9		       c9 01		      cmp	#LEVEL_IS_DONE	; (try optimizing later)
     45  10eb		       d0 0c		      bne	dont_update
     46  10ed
     47  10ed							; level is done; reset level completed
     48  10ed		       a9 00		      lda	#LEVEL_NOT_DONE
     49  10ef		       85 09		      sta	level_completed
     50  10f1
     51  10f1							; now set current_level to next_level
     52  10f1		       a5 06		      lda	next_level
     53  10f3		       85 04		      sta	current_level
     54  10f5		       a5 07		      lda	next_level+1
     55  10f7		       85 05		      sta	current_level+1
     56  10f9
     57  10f9				   dont_update
     58  10f9							; now check if level reset was set
     59  10f9		       a5 08		      lda	level_reset
     60  10fb		       c9 00		      cmp	#0
     61  10fd		       d0 01		      bne	continue_update	; if not, go back to game loop
     62  10ff		       60		      rts
     63  1100
     64  1100				   continue_update
     65  1100							; if it was, update the level
     66  1100		       a9 00		      lda	#SCREEN_CURSOR_BEGINNING_LOW_BYTE
     67  1102		       85 00		      sta	screen_cursor
     68  1104		       a9 1e		      lda	#SCREEN_CURSOR_BEGINNING_HIGH_BYTE
     69  1106		       85 01		      sta	screen_cursor+1
     70  1108
     71  1108		       a9 00		      lda	#COLOR_CURSOR_BEGINNING_LOW_BYTE
     72  110a		       85 02		      sta	color_cursor
     73  110c		       a9 96		      lda	#COLOR_CURSOR_BEGINNING_HIGH_BYTE
     74  110e		       85 03		      sta	color_cursor+1
     75  1110
     76  1110		       a2 00		      ldx	#0
     77  1112		       a0 00		      ldy	#0
     78  1114		       84 0a		      sty	level_data_index
     79  1116							; draw (or redraw) the current level
     80  1116				   draw_level_loop
     81  1116							; y stores our index in the current level data
     82  1116		       a4 0a		      ldy	level_data_index
     83  1118		       b1 04		      lda	(current_level),y	; accumulator stores the number of times to repeat the next byte  
     84  111a
     85  111a		       20 36 11 	      jsr	draw_sequence
     86  111d
     87  111d		       a4 0a		      ldy	level_data_index
     88  111f		       c8		      iny		; set y to point to next length byte (iterate 2 at a time)
     89  1120		       c8		      iny
     90  1121		       84 0a		      sty	level_data_index
     91  1123
     92  1123
     93  1123		       20 8f 10 	      jsr	check_if_screen_cursor_at_end
     94  1126		       90 ee		      bcc	draw_level_loop
     95  1128
     96  1128
     97  1128							; update next level pointer to point to byte after current level
     98  1128		       a5 04		      lda	current_level
     99  112a		       18		      clc
    100  112b		       65 0a		      adc	level_data_index
    101  112d		       85 06		      sta	next_level
    102  112f		       a5 05		      lda	current_level+1
    103  1131		       69 00		      adc	#0
    104  1133		       85 07		      sta	next_level+1
    105  1135		       60		      rts
    106  1136
    107  1136
    108  1136
    109  1136							; i love writing decompression code in assembly. i love writing decompression code in assembly. i love writing decompression code in assembly. 
    110  1136				   draw_sequence
    111  1136							; if acc == 0, return; otherwise subtract 1, draw the next 2 chars
    112  1136		       f0 1c		      beq	draw_sequence_end
    113  1138		       38		      sec
    114  1139		       e9 01		      sbc	#1
    115  113b		       48		      pha		; push accumulator onto stack
    116  113c
    117  113c		       a4 0a		      ldy	level_data_index
    118  113e		       c8		      iny		; (so we can access the "element" byte after the length byte)
    119  113f		       b1 04		      lda	(current_level),y	; get formatted byte (see squarebot doc)
    120  1141		       0a		      asl		; lol
    121  1142		       0a		      asl
    122  1143		       0a		      asl
    123  1144		       0a		      asl
    124  1145		       20 55 11 	      jsr	draw_high_bits	; draw char represented by the 4 high bits
    125  1148
    126  1148		       a4 0a		      ldy	level_data_index
    127  114a		       c8		      iny
    128  114b
    129  114b		       b1 04		      lda	(current_level),y
    130  114d		       20 55 11 	      jsr	draw_high_bits
    131  1150
    132  1150		       68		      pla
    133  1151		       4c 36 11 	      jmp	draw_sequence
    134  1154
    135  1154				   draw_sequence_end
    136  1154		       60		      rts
    137  1155
    138  1155
    139  1155							; put the character in the high 4 bits of accumulator on screen (see readme), and move the color and screen cursors ahead
    140  1155				   draw_high_bits
    141  1155		       29 f0		      and	#240	; shave off last 4 bits
    142  1157
    143  1157		       c9 00		      cmp	#BLANK_SPACE
    144  1159		       d0 08		      bne	check_if_starting_point
    145  115b		       a9 20		      lda	#BLANK_SPACE_CHAR	; todo; replace with actual chars
    146  115d		       a2 01		      ldx	#1
    147  115f		       20 e7 11 	      jsr	draw_char_in_accumulator
    148  1162		       60		      rts
    149  1163
    150  1163				   check_if_starting_point
    151  1163		       c9 10		      cmp	#STARTING_POINT
    152  1165		       d0 18		      bne	check_if_wall
    153  1167
    154  1167							; set squarebot to starting point
    155  1167		       a5 00		      lda	screen_cursor
    156  1169		       85 11		      sta	squarebot_position
    157  116b		       a5 01		      lda	screen_cursor+1
    158  116d		       85 12		      sta	squarebot_position+1
    159  116f
    160  116f		       a5 02		      lda	color_cursor
    161  1171		       85 13		      sta	squarebot_color_position
    162  1173		       a5 03		      lda	color_cursor+1
    163  1175		       85 14		      sta	squarebot_color_position+1
    164  1177
    165  1177		       a9 01		      lda	#$1
    166  1179		       a2 02		      ldx	#SQUAREBOT_COLOR
    167  117b		       20 e7 11 	      jsr	draw_char_in_accumulator
    168  117e
    169  117e
    170  117e
    171  117e		       60		      rts
    172  117f
    173  117f				   check_if_wall
    174  117f		       c9 20		      cmp	#WALL
    175  1181		       d0 08		      bne	check_if_breakable_wall
    176  1183		       a9 03		      lda	#WALL_CHAR
    177  1185		       a2 00		      ldx	#WALL_COLOR
    178  1187		       20 e7 11 	      jsr	draw_char_in_accumulator
    179  118a		       60		      rts
    180  118b
    181  118b				   check_if_breakable_wall
    182  118b		       c9 30		      cmp	#BREAKABLE_WALL
    183  118d		       d0 08		      bne	check_if_locked_wall
    184  118f		       a9 07		      lda	#BREAKABLE_WALL_CHAR
    185  1191		       a2 00		      ldx	#BREAKABLE_WALL_COLOR
    186  1193		       20 e7 11 	      jsr	draw_char_in_accumulator
    187  1196		       60		      rts
    188  1197
    189  1197				   check_if_locked_wall
    190  1197		       c9 40		      cmp	#LOCKED_WALL
    191  1199		       d0 08		      bne	check_if_ladder
    192  119b		       a9 06		      lda	#LOCKED_WALL_CHAR
    193  119d		       a2 00		      ldx	#LOCKED_WALL_COLOR
    194  119f		       20 e7 11 	      jsr	draw_char_in_accumulator
    195  11a2		       60		      rts
    196  11a3
    197  11a3				   check_if_ladder
    198  11a3		       c9 50		      cmp	#LADDER
    199  11a5		       d0 08		      bne	check_if_exit
    200  11a7		       a9 00		      lda	#LADDER_CHAR
    201  11a9		       a2 08		      ldx	#LADDER_COLOR
    202  11ab		       20 e7 11 	      jsr	draw_char_in_accumulator
    203  11ae		       60		      rts
    204  11af
    205  11af				   check_if_exit
    206  11af		       c9 60		      cmp	#EXIT
    207  11b1		       d0 08		      bne	check_if_platform
    208  11b3		       a9 04		      lda	#EXIT_CHAR
    209  11b5		       a2 02		      ldx	#EXIT_COLOR
    210  11b7		       20 e7 11 	      jsr	draw_char_in_accumulator
    211  11ba		       60		      rts
    212  11bb
    213  11bb				   check_if_platform
    214  11bb		       c9 70		      cmp	#PLATFORM
    215  11bd		       d0 08		      bne	check_if_key
    216  11bf		       a9 02		      lda	#PLATFORM_CHAR
    217  11c1		       a2 02		      ldx	#PLATFORM_COLOR
    218  11c3		       20 e7 11 	      jsr	draw_char_in_accumulator
    219  11c6		       60		      rts
    220  11c7
    221  11c7
    222  11c7				   check_if_key
    223  11c7		       c9 80		      cmp	#KEY
    224  11c9		       d0 08		      bne	check_if_spike
    225  11cb		       a9 05		      lda	#KEY_CHAR
    226  11cd		       a2 07		      ldx	#KEY_COLOR
    227  11cf		       20 e7 11 	      jsr	draw_char_in_accumulator
    228  11d2		       60		      rts
    229  11d3
    230  11d3				   check_if_spike
    231  11d3		       c9 90		      cmp	#SPIKE
    232  11d5		       d0 08		      bne	check_if_booster
    233  11d7		       a9 08		      lda	#SPIKE_CHAR
    234  11d9		       a2 06		      ldx	#SPIKE_COLOR
    235  11db		       20 e7 11 	      jsr	draw_char_in_accumulator
    236  11de		       60		      rts
    237  11df
    238  11df				   check_if_booster
    239  11df		       a9 09		      lda	#BOOSTER_CHAR
    240  11e1		       a2 03		      ldx	#BOOSTER_COLOR
    241  11e3		       20 e7 11 	      jsr	draw_char_in_accumulator
    242  11e6		       60		      rts
    243  11e7
    244  11e7
    245  11e7							; char in accumulator goes in screen cursor, color in x register goes in color cursor, then update cursors
    246  11e7
    247  11e7				   draw_char_in_accumulator
    248  11e7		       a0 00		      ldy	#0
    249  11e9		       91 00		      sta	(screen_cursor),y
    250  11eb
    251  11eb		       8a		      txa
    252  11ec		       91 02		      sta	(color_cursor),y
    253  11ee
    254  11ee		       20 74 10 	      jsr	add_one_to_screen_cursor	; add to both screen and color cursor
    255  11f1		       60		      rts
------- FILE src/main.s
------- FILE updateGameState.s LEVEL 2 PASS 3
      0  11f2					      include	"updateGameState.s"
      1  11f2
      2  11f2		       00 01	   MOVE_LEFT  =	1
      3  11f2		       00 02	   MOVE_RIGHT =	2
      4  11f2		       00 01	   SQUAREBOT_CHAR =	$1
      5  11f2		       00 02	   SQUAREBOT_COLOR =	$2
      6  11f2		       00 e4	   START_OF_FIRST_ROW_LOW_BYTE =	$e4
      7  11f2		       00 1f	   START_OF_FIRST_ROW_HIGH_BYTE =	$1f
      8  11f2
      9  11f2							; handle player input, update current state of game objects
     10  11f2							; some pseudocode to provide a better idea of what we're doing here:
     11  11f2
     12  11f2							; new_position = squarebot_position
     13  11f2							; if A pressed
     14  11f2							;   new_position += 1 (move right one char)
     15  11f2							; if D pressed
     16  11f2							;   new_position -= 1 (move left one char)
     17  11f2							; if not valid(new_position)
     18  11f2							;   new_position = squarebot_position
     19  11f2
     20  11f2							; if jump_remaining = 0 and space not pressed:
     21  11f2							;   return
     22  11f2							; if jump_remaining = 0 and space is pressed:
     23  11f2							;   jump remaining = JUMP_SIZE
     24  11f2
     25  11f2
     26  11f2							; if jump_remaining > 0
     27  11f2							;   new_position -= 22 (go up one)
     28  11f2							;   if not valid(new_position):
     29  11f2							;     new_position = squarebot_position
     30  11f2							;     jump_remaining = 0
     31  11f2							; else
     32  11f2							;   new_position += 22 (go down one)
     33  11f2							;   jump_remaining -= 1
     34  11f2							;   if not valid(new_position):
     35  11f2							;     jump_remaining = 0
     36  11f2							;     new_position = o
     37  11f2							; 
     38  11f2							;
     39  11f2
     40  11f2				   update_game_state
     41  11f2		       a5 11		      lda	squarebot_position
     42  11f4		       85 0c		      sta	new_position
     43  11f6		       a5 12		      lda	squarebot_position+1
     44  11f8		       85 0d		      sta	new_position+1
     45  11fa		       a5 13		      lda	squarebot_color_position
     46  11fc		       85 0e		      sta	new_color_position
     47  11fe		       a5 14		      lda	squarebot_color_position+1
     48  1200		       85 0f		      sta	new_color_position+1
     49  1202
     50  1202		       a5 c5		      lda	currently_pressed_key
     51  1204		       c9 11		      cmp	#A_KEY
     52  1206		       d0 06		      bne	check_if_d_pressed
     53  1208		       20 bc 12 	      jsr	move_new_position_to_left
     54  120b		       4c 15 12 	      jmp	check_if_new_position_valid
     55  120e
     56  120e				   check_if_d_pressed
     57  120e		       c9 12		      cmp	#D_KEY
     58  1210		       d0 03		      bne	check_if_new_position_valid
     59  1212		       20 a1 12 	      jsr	move_new_position_to_right
     60  1215
     61  1215				   check_if_new_position_valid
     62  1215		       a0 00		      ldy	#0
     63  1217		       b1 0c		      lda	(new_position),y
     64  1219		       c9 04		      cmp	#EXIT_CHAR
     65  121b		       f0 7d		      beq	level_has_finished
     66  121d
     67  121d		       c9 20		      cmp	#BLANK_CHAR
     68  121f		       d0 03		      bne	handle_jump_logic
     69  1221		       20 7c 12 	      jsr	update_squarebot_position
     70  1224
     71  1224				   handle_jump_logic
     72  1224		       a5 17		      lda	jump_remaining	; how many more upward motions for current jump
     73  1226		       c9 00		      cmp	#0
     74  1228		       d0 1b		      bne	handle_jumps_remaining
     75  122a
     76  122a
     77  122a				   handle_no_jumps_remaining		; if no jumps left, then start jump if space is pressed, otherwise just skip and handle gravity
     78  122a		       a5 c5		      lda	currently_pressed_key
     79  122c		       c9 20		      cmp	#SPACE_KEY
     80  122e		       d0 34		      bne	handle_gravity
     81  1230
     82  1230
     83  1230
     84  1230		       20 18 13 	      jsr	squarebot_on_first_row	; if on first row, we dont care about what character lies below
     85  1233		       b0 0c		      bcs	skip_validity_check
     86  1235
     87  1235							; check if character below is blank; if so dont allow us to set jump_remaining
     88  1235		       a0 16		      ldy	#ROW_SIZE
     89  1237		       b1 11		      lda	(squarebot_position),y
     90  1239
     91  1239		       c9 04		      cmp	#EXIT_CHAR
     92  123b		       f0 5d		      beq	level_has_finished
     93  123d
     94  123d		       c9 20		      cmp	#BLANK_SPACE_CHAR
     95  123f		       f0 23		      beq	handle_gravity
     96  1241
     97  1241				   skip_validity_check
     98  1241		       a9 04		      lda	#JUMP_SIZE
     99  1243		       85 17		      sta	jump_remaining
    100  1245
    101  1245				   handle_jumps_remaining
    102  1245		       20 d7 12 	      jsr	move_new_position_up
    103  1248		       a0 00		      ldy	#0
    104  124a		       b1 0c		      lda	(new_position),y
    105  124c		       c9 04		      cmp	#EXIT_CHAR
    106  124e		       f0 4a		      beq	level_has_finished
    107  1250
    108  1250		       c9 20		      cmp	#BLANK_CHAR
    109  1252		       d0 0b		      bne	jump_is_invalid	; cant continue moving up; somethings in the way
    110  1254
    111  1254		       20 7c 12 	      jsr	update_squarebot_position
    112  1257
    113  1257		       a5 17		      lda	jump_remaining
    114  1259		       38		      sec
    115  125a		       e9 01		      sbc	#1
    116  125c		       85 17		      sta	jump_remaining
    117  125e		       60		      rts		; no gravity effect after moving upwards from jump
    118  125f
    119  125f
    120  125f				   jump_is_invalid
    121  125f		       a9 00		      lda	#0
    122  1261		       85 17		      sta	jump_remaining
    123  1263		       60		      rts
    124  1264
    125  1264				   handle_gravity		; on first row - do nothing
    126  1264		       20 f2 12 	      jsr	move_new_position_down
    127  1267
    128  1267		       20 18 13 	      jsr	squarebot_on_first_row
    129  126a		       b0 0f		      bcs	do_nothing
    130  126c
    131  126c		       a0 00		      ldy	#0
    132  126e		       b1 0c		      lda	(new_position),y
    133  1270
    134  1270		       c9 04		      cmp	#EXIT_CHAR
    135  1272		       f0 26		      beq	level_has_finished
    136  1274
    137  1274		       c9 20		      cmp	#BLANK_CHAR
    138  1276		       d0 03		      bne	do_nothing
    139  1278
    140  1278
    141  1278		       20 7c 12 	      jsr	update_squarebot_position
    142  127b
    143  127b				   do_nothing
    144  127b		       60		      rts
    145  127c
    146  127c				   update_squarebot_position
    147  127c		       20 0d 13 	      jsr	remove_char
    148  127f							; new positions are valid; set them to current positions
    149  127f		       a5 0c		      lda	new_position
    150  1281		       85 11		      sta	squarebot_position
    151  1283		       a5 0d		      lda	new_position+1
    152  1285		       85 12		      sta	squarebot_position+1
    153  1287
    154  1287		       a5 0e		      lda	new_color_position
    155  1289		       85 13		      sta	squarebot_color_position
    156  128b		       a5 0f		      lda	new_color_position+1
    157  128d		       85 14		      sta	squarebot_color_position+1
    158  128f
    159  128f		       a0 00		      ldy	#0
    160  1291		       a9 01		      lda	#SQUAREBOT_CHAR
    161  1293		       91 11		      sta	(squarebot_position),y
    162  1295		       a9 02		      lda	#SQUAREBOT_COLOR
    163  1297		       91 13		      sta	(squarebot_color_position),y
    164  1299
    165  1299		       60		      rts
    166  129a
    167  129a				   level_has_finished
    168  129a		       a9 01		      lda	#1
    169  129c		       85 09		      sta	level_completed
    170  129e		       85 08		      sta	level_reset
    171  12a0		       60		      rts
    172  12a1
    173  12a1				   move_new_position_to_right
    174  12a1		       18		      clc
    175  12a2		       a5 0c		      lda	new_position	; load and add to low byte
    176  12a4		       69 01		      adc	#$1
    177  12a6		       85 0c		      sta	new_position
    178  12a8		       a5 0d		      lda	new_position+1
    179  12aa		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
    180  12ac		       85 0d		      sta	new_position+1
    181  12ae		       18		      clc
    182  12af		       a5 0e		      lda	new_color_position	; load and add to low byte
    183  12b1		       69 01		      adc	#$1
    184  12b3		       85 0e		      sta	new_color_position
    185  12b5		       a5 0f		      lda	new_color_position+1
    186  12b7		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
    187  12b9		       85 0f		      sta	new_color_position+1
    188  12bb		       60		      rts
    189  12bc
    190  12bc				   move_new_position_to_left
    191  12bc		       38		      sec
    192  12bd		       a5 0c		      lda	new_position
    193  12bf		       e9 01		      sbc	#$1
    194  12c1		       85 0c		      sta	new_position
    195  12c3		       a5 0d		      lda	new_position+1
    196  12c5		       e9 00		      sbc	#$0
    197  12c7		       85 0d		      sta	new_position+1
    198  12c9		       38		      sec
    199  12ca		       a5 0e		      lda	new_color_position
    200  12cc		       e9 01		      sbc	#$1
    201  12ce		       85 0e		      sta	new_color_position
    202  12d0		       a5 0f		      lda	new_color_position+1
    203  12d2		       e9 00		      sbc	#$0
    204  12d4		       85 0f		      sta	new_color_position+1
    205  12d6		       60		      rts
    206  12d7
    207  12d7
    208  12d7				   move_new_position_up
    209  12d7		       38		      sec
    210  12d8		       a5 0c		      lda	new_position
    211  12da		       e9 16		      sbc	#ROW_SIZE
    212  12dc		       85 0c		      sta	new_position
    213  12de		       a5 0d		      lda	new_position+1
    214  12e0		       e9 00		      sbc	#$0
    215  12e2		       85 0d		      sta	new_position+1
    216  12e4		       38		      sec
    217  12e5		       a5 0e		      lda	new_color_position
    218  12e7		       e9 16		      sbc	#ROW_SIZE
    219  12e9		       85 0e		      sta	new_color_position
    220  12eb		       a5 0f		      lda	new_color_position+1
    221  12ed		       e9 00		      sbc	#$0
    222  12ef		       85 0f		      sta	new_color_position+1
    223  12f1		       60		      rts
    224  12f2
    225  12f2				   move_new_position_down
    226  12f2		       18		      clc
    227  12f3		       a5 0c		      lda	new_position	; load and add to low byte
    228  12f5		       69 16		      adc	#ROW_SIZE
    229  12f7		       85 0c		      sta	new_position
    230  12f9		       a5 0d		      lda	new_position+1
    231  12fb		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
    232  12fd		       85 0d		      sta	new_position+1
    233  12ff		       18		      clc
    234  1300		       a5 0e		      lda	new_color_position	; load and add to low byte
    235  1302		       69 16		      adc	#ROW_SIZE
    236  1304		       85 0e		      sta	new_color_position
    237  1306		       a5 0f		      lda	new_color_position+1
    238  1308		       69 00		      adc	#$0	; add if carry flag is set (low byte overflowed)
    239  130a		       85 0f		      sta	new_color_position+1
    240  130c		       60		      rts
    241  130d
    242  130d
    243  130d				   remove_char		; remove squarebot from current screen location
    244  130d		       a0 00		      ldy	#0
    245  130f		       a9 20		      lda	#BLANK_CHAR
    246  1311		       91 11		      sta	(squarebot_position),Y
    247  1313		       a9 01		      lda	#1
    248  1315		       91 13		      sta	(squarebot_color_position),Y
    249  1317		       60		      rts
    250  1318
    251  1318				   squarebot_on_first_row		; set carry flag to 0 if squarebot_position is on bottom of screen; otherwise set to 1
    252  1318		       a5 12		      lda	squarebot_position+1
    253  131a		       c9 1f		      cmp	#START_OF_FIRST_ROW_HIGH_BYTE
    254  131c		       90 08		      bcc	return_false	; compare high bits; return false if current position high bit is smaller than high bit of leftmost position on first row
    255  131e		       a5 11		      lda	squarebot_position
    256  1320		       c9 e4		      CMP	#START_OF_FIRST_ROW_LOW_BYTE
    257  1322		       90 02		      bcc	return_false
    258  1324
    259  1324				   return_true
    260  1324		       38		      sec
    261  1325		       60		      rts
    262  1326
    263  1326				   return_false
    264  1326		       18		      clc
    265  1327		       60		      rts
------- FILE src/main.s
    132  1328
    133  1328				   compressed_screen_data_start
    134  1328					      incbin	"../data/titleScreenData_compressed"	; got via 'bsave ""'
    135  1390
    136  1390				   level_data_start
    137  1390					      incbin	"../data/levels/binary_levels/1"
    138  1398					      incbin	"../data/levels/binary_levels/2"
    139  13b0					      incbin	"../data/levels/binary_levels/3"
    140  1408					      incbin	"../data/levels/binary_levels/4"
    141  1432
------- FILE memoryCheck.s LEVEL 2 PASS 3
      0  1432					      include	"memoryCheck.s"	; code to make sure the program isn't too large and enters screen memory
      1  1432		       04 31	   BYTES_USED =	.-$1001	; location counter minus starting location = total bytes used
      2  1432		       1e 00	   SCREEN_MEMORY_START =	$1e00
 1073 bytes used
      3  1432					      echo	[BYTES_USED]d, "bytes used"
 Ending program at memory location (base 10):  5170
      4  1432					      echo	"Ending program at memory location (base 10): ", [.]d
      5  1432				  -	      if	. >= SCREEN_MEMORY_START	; if program entering screen memory
      6  1432				  -	      echo	"Throwing error because program is too large, and has entered screen memory!"
      7  1432				  -	      err
      8  1432					      endif
------- FILE src/main.s
    143  1432
    144  1432
    145  1c00					      org	character_set_begin
    146  1c00		       81 ff ff 81*	      BYTE.b	129,255,255,129,129,255,255,129	; ladder 0
    147  1c08		       ff 81 a5 81*	      BYTE.b	255,129,165,129,189,165,129,255	; squarebot 1
    148  1c10		       ff ff 00 00*	      BYTE.b	255,255,0,0,0,0,0,0	; platform 2
    149  1c18		       ff ff ff ff*	      BYTE.b	255,255,255,255,255,255,255,255	; wall 3
    150  1c20		       7e e7 81 81*	      BYTE.b	126,231,129,129,225,129,129,255	; exit (door) 4
    151  1c28		       18 24 18 18*	      BYTE.b	24,36,24,24,30,24,30,24	; key powerup 5 
    152  1c30		       ff ff ef ef*	      BYTE.b	255,255,239,239,239,227,255,255	;locked wall 6
    153  1c38		       ff bd fd b7*	      BYTE.b	255,189,253,183,127,239,231,255	; breakable wall 7
    154  1c40		       00 00 18 3c*	      BYTE.b	0,0,24,60,126,126,0,0	; spike 8
    155  1c48		       00 70 48 78*	      BYTE.b	0,112,72,120,72,72,112,0	; booster powerup 9
